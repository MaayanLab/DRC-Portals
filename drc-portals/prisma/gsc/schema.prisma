generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/.prisma/client/gsc"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("GSC_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  pipelineSessions PipelineSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gene {
  id                 String               @id @default(cuid())
  gene_symbol        String
  synonyms           String
  description        String?
  GeneToGeneSet      GeneToGeneSet[]
  GeneToaddedGeneset GeneToaddedGeneset[]
  GeneTocfdegeneset  GeneTocfdegeneset[]

  @@map("genes")
}

model GeneSet {
  id            String          @id @default(cuid())
  name          String
  description   String?
  session_id    String
  createdAt     DateTime        @default(now())
  isHumanGenes  Boolean         @default(true)
  otherSymbols  String[]        @default([])
  background    String?
  GeneToGeneSet GeneToGeneSet[]
  session       PipelineSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@map("gene_lists")
}

model PipelineSession {
  id           String    @id @default(cuid())
  user_id      String
  createdAt    DateTime  @default(now())
  lastModified DateTime  @default(now())
  session_name String?
  private      Boolean   @default(true)
  gene_sets    GeneSet[]
  creator      User      @relation(fields: [user_id], references: [id])

  @@map("user_sessions")
}

model CFDECrossPair {
  id         String   @id @default(cuid())
  lib_1      String
  lib_2      String
  geneset_1  String
  geneset_2  String
  odds_ratio Float
  pvalue     Float
  n_overlap  Int
  overlap    String[]
  n_genes1   Int
  n_genes2   Int

  @@unique([lib_1, lib_2, geneset_1, geneset_2])
  @@map("cfde_cross_pair")
}

model LibAbstracts {
  id       String @id @default(cuid())
  lib      String @unique
  abstract String

  @@map("lib_abstracts")
}

model cfdegeneset {
  id                String              @id @default(cuid())
  term              String
  library           String
  description       String?
  GeneTocfdegeneset GeneTocfdegeneset[]

  @@unique([term, library])
  @@map("cfde_genesets")
}

model addedGeneset {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  otherSymbols       String[]             @default([])
  background         String?
  GeneToaddedGeneset GeneToaddedGeneset[]

  @@map("added_genesets")
}

model addedBackground {
  hash  String   @id @unique
  genes String[]

  @@map("added_backgrounds")
}

model paperContacts {
  id            String @id @default(uuid())
  pmcid         String
  article_title String
  surname       String
  given_name    String
  email         String

  @@unique([pmcid, email])
  @@map("paper_contacts")
}

model report {
  hash         String @id @unique
  analysisData Json

  @@map("report")
}

model GeneToGeneSet {
  A          String
  B          String
  genes      Gene    @relation(fields: [A], references: [id], onDelete: Cascade)
  gene_lists GeneSet @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_GeneToGeneSet_AB_unique")
  @@index([B], map: "_GeneToGeneSet_B_index")
  @@map("_GeneToGeneSet")
}

model GeneToaddedGeneset {
  A              String
  B              String
  genes          Gene         @relation(fields: [A], references: [id], onDelete: Cascade)
  added_genesets addedGeneset @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_GeneToaddedGeneset_AB_unique")
  @@index([B], map: "_GeneToaddedGeneset_B_index")
  @@map("_GeneToaddedGeneset")
}

model GeneTocfdegeneset {
  A             String
  B             String
  genes         Gene        @relation(fields: [A], references: [id], onDelete: Cascade)
  cfde_genesets cfdegeneset @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_GeneTocfdegeneset_AB_unique")
  @@index([B], map: "_GeneTocfdegeneset_B_index")
  @@map("_GeneTocfdegeneset")
}
