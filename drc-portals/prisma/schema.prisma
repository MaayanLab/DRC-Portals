// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DCC {
  id            String @id @default(uuid())
  label         String
  short_label   String?
  description   String?
  homepage      String
  icon          String?
  annotation    Json?
  cfde_partner   Boolean @default(false)
  publications  DCCPublication[]
  assets        DccAsset[]
  outreach      DCCOutreach[]
  @@map("dccs")
}

model Publication {
  id            String @id @default(uuid())
  title         String
  year          String?
  page          String?
  volume        String?
  issue         String?
  journal       String?
  pmid          String?
  pmcid         String?
  doi           String?
  authors       String
  tool_id       String?
  dccs          DCCPublication[]
  tool          Tool? @relation(fields: [tool_id], references: [id])
  @@map("publications")
}

model DCCPublication {
  publication   Publication @relation(fields: [publication_id], references: [id])
  publication_id String
  dcc           DCC         @relation(fields: [dcc_id], references: [id])
  dcc_id         String

  @@id([publication_id, dcc_id])
  @@map("dcc_publications")
}

model Outreach {
  id                  String @id @default(uuid())
  title               String
  short_description   String
  description         String
  tags                Json
  featured            Boolean @default(false)
  active              Boolean @default(false)
  start_date          DateTime? @db.Timestamptz(3)
  end_date            DateTime? @db.Timestamptz(3)
  application_start   DateTime? @db.Timestamptz(3)
  application_end     DateTime? @db.Timestamptz(3)
  link                String?
  image               String?
  dccs                DCCOutreach[]
  @@map("outreach")
}

model DCCOutreach {
  outreach      Outreach @relation(fields: [outreach_id], references: [id])
  outreach_id   String
  dcc           DCC         @relation(fields: [dcc_id], references: [id])
  dcc_id        String

  @@id([outreach_id, dcc_id])
  @@map("dcc_outreach")
}


model Tool {
  id            String @id @default(uuid())
  label         String
  description   String?
  url           String
  icon          String?
  publications  Publication[]
  @@map("tools")
}

model DccAsset {
  dcc_id          String
  dcc             DCC?              @relation(fields: [dcc_id], references: [id])
  filetype        String
  filename        String
  link            String            @unique
  size            BigInt?
  lastmodified    DateTime          @default(now())
  current         Boolean           @default(true)
  creator         String?
  creatorId       User?             @relation(fields: [creator], references: [email])
  dccapproved     Boolean           @default(false)
  drcapproved     Boolean           @default(false)
  annotation      Json?             @db.JsonB
  xlibrary        XLibrary?
  C2M2DataPackage C2M2DataPackage[]

  @@id([dcc_id, filetype, link, lastmodified])
  @@unique([dcc_id, filetype, link, lastmodified])
  @@map("dcc_assets")
}

// Processed data search
model XIdentity {
  type            String
  id              String            @id @db.Uuid
  label           String
  description     String
  searchable      String
  entity_id       String?           @unique @db.Uuid
  set_id          String?           @unique @db.Uuid
  library_id      String?           @unique @db.Uuid
  c2m2file_id     String?           @unique @db.Uuid
  library         XLibrary?
  entity          XEntity?
  set             XSet?
  c2m2file        C2M2File?

  @@index([type])
  @@index([label])
  @@index([label(ops: raw("gin_trgm_ops"))], map: "xidentity_label_trgm", type: Gin)
  @@map("xidentity")
}

model XEntity {
  id        String     @id @db.Uuid
  identity  XIdentity  @relation(fields: [id], references: [id], onDelete: Cascade)
  libraries XLibrary[] @relation("XEntityToXLibrary")
  sets      XSet[]     @relation("XEntityToXSet")

  @@map("xentity")
}

model XSet {
  id         String    @id @db.Uuid
  library_id String    @db.Uuid
  library    XLibrary  @relation(fields: [library_id], references: [id], onDelete: Cascade)
  identity   XIdentity @relation(fields: [id], references: [id], onDelete: Cascade)
  contains   XEntity[] @relation("XEntityToXSet")

  @@map("xset")
}

model XLibrary {
  id             String    @id @db.Uuid
  dcc_asset_link String    @unique
  entity_type    String
  term_type      String
  dcc_asset      DccAsset  @relation(fields: [dcc_asset_link], references: [link], onDelete: Cascade)
  identity       XIdentity @relation(fields: [id], references: [id], onDelete: Cascade)
  sets           XSet[]
  entities       XEntity[] @relation("XEntityToXLibrary")

  @@map("xlibrary")
}

model C2M2DataPackage {
  id             String     @id @db.Uuid
  dcc_asset_link String
  dcc_asset      DccAsset   @relation(fields: [dcc_asset_link], references: [link], onDelete: Cascade)
  files          C2M2File[]

  @@map("c2m2datapackage")
}

model C2M2File {
  id             String          @id @db.Uuid
  creation_time  DateTime?       @db.Timestamptz()
  persistent_id  String?
  size_in_bytes  BigInt?
  file_format    String?
  data_type      String?
  assay_type     String?
  datapackage_id String          @db.Uuid
  datapackage    C2M2DataPackage @relation(fields: [datapackage_id], references: [id], onDelete: Cascade)
  identity       XIdentity       @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("c2m2file")
}

// End processed data search

// Next-Auth schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  dcc           String?
  role          Role @default(USER)
  dccAsset      DccAsset[]
}

enum Role {
  USER
  DCC_APPROVER
  UPLOADER
  DRC_APPROVER
  ADMIN
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End Next-Auth schema
