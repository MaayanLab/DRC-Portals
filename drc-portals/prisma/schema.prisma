// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DCC {
  id            String @id @default(uuid())
  label         String
  short_label   String?
  description   String?
  homepage      String
  icon          String?
  annotation    Json?
  cfde_partner   Boolean @default(false)
  publications  DCCPublication[]
  assets        DccAsset[]
  outreach      DCCOutreach[]
  @@map("dccs")
}

model Publication {
  id            String @id @default(uuid())
  title         String
  year          String?
  page          String?
  volume        String?
  issue         String?
  journal       String?
  pmid          String?
  pmcid         String?
  doi           String?
  authors       String
  tool_id       String?
  dccs          DCCPublication[]
  tool          Tool? @relation(fields: [tool_id], references: [id])
  @@map("publications")
}

model DCCPublication {
  publication   Publication @relation(fields: [publication_id], references: [id])
  publication_id String
  dcc           DCC         @relation(fields: [dcc_id], references: [id])
  dcc_id         String

  @@id([publication_id, dcc_id])
  @@map("dcc_publications")
}

model Outreach {
  id                  String @id @default(uuid())
  title               String
  short_description   String
  description         String
  tags                Json
  featured            Boolean @default(false)
  active              Boolean @default(false)
  start_date          DateTime?
  end_date            DateTime?
  start_time          DateTime?
  end_time            DateTime?
  link                String?
  image               String?
  dccs                DCCOutreach[]
  @@map("outreach")
}

model DCCOutreach {
  outreach      Outreach @relation(fields: [outreach_id], references: [id])
  outreach_id   String
  dcc           DCC         @relation(fields: [dcc_id], references: [id])
  dcc_id        String

  @@id([outreach_id, dcc_id])
  @@map("dcc_outreach")
}


model Tool {
  id            String @id @default(uuid())
  label         String
  description   String?
  url           String
  icon          String?
  publications  Publication[]
  @@map("tools")
}

model DccAsset {
  dcc_id       String
  dcc          DCC?     @relation(fields: [dcc_id], references: [id])
  filetype     String
  filename     String
  link         String
  size         BigInt?
  lastmodified DateTime @default(now())
  current      Boolean  @default(true)
  creator      String
  approved     Boolean  @default(false)
  annotation   Json?    @db.JsonB

  @@id([dcc_id, filetype, link, lastmodified])
  @@map("dcc_assets")
  @@unique([dcc_id, filetype, link, lastmodified])
}

// Next-Auth schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End Next-Auth schema
