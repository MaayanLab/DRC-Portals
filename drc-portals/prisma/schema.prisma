// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DCC {
  id           String           @id @default(uuid())
  label        String
  description  String
  homepage     String
  icon         String?
  annotation   Json?
  publications DCCPublication[]
  assets       DccAsset[]
}

model Publication {
  id       String           @id @default(uuid())
  citation String
  toolId   String?
  dccs     DCCPublication[]
  tool     Tool?            @relation(fields: [toolId], references: [id])
}

model DCCPublication {
  publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String
  dcc           DCC         @relation(fields: [dccId], references: [id])
  dccId         String

  @@id([publicationId, dccId])
}

model Tool {
  id           String        @id @default(uuid())
  label        String
  description  String?
  url          String
  icon         String?
  publications Publication[]
}

model DccAsset {
  dccId        String
  dcc          DCC?     @relation(fields: [dccId], references: [id])
  filetype     String
  filename     String
  link         String
  size         Int?
  lastmodified DateTime @default(now())
  current      Boolean  @default(true)
  creator      String
  approved     Boolean  @default(false)
  annotation   Json?    @db.JsonB

  @@id([dccId, filetype, link, lastmodified])
  @@unique([dccId, filetype, link, lastmodified])
}

// Next-Auth schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End Next-Auth schema
