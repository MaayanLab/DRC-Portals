// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DCC {
  id            String           @id @default(uuid())
  label         String
  short_label   String?
  description   String?
  homepage      String
  icon          String?
  annotation    Json?
  cfde_partner  Boolean          @default(false)
  publications  DCCPublication[]
  assets        DccAsset[]
  outreach      DCCOutreach[]
  nodes         Node[]
  kg_assertions KGAssertion[]

  @@map("dccs")
}

model Publication {
  id      String           @id @default(uuid())
  title   String
  year    String?
  page    String?
  volume  String?
  issue   String?
  journal String?
  pmid    String?
  pmcid   String?
  doi     String?
  authors String
  tool_id String?
  dccs    DCCPublication[]
  tool    Tool?            @relation(fields: [tool_id], references: [id])

  @@map("publications")
}

model DCCPublication {
  publication    Publication @relation(fields: [publication_id], references: [id])
  publication_id String
  dcc            DCC         @relation(fields: [dcc_id], references: [id])
  dcc_id         String

  @@id([publication_id, dcc_id])
  @@map("dcc_publications")
}

model Outreach {
  id                String        @id @default(uuid())
  title             String
  short_description String
  description       String
  tags              Json
  featured          Boolean       @default(false)
  active            Boolean       @default(false)
  start_date        DateTime?     @db.Timestamptz(3)
  end_date          DateTime?     @db.Timestamptz(3)
  application_start DateTime?     @db.Timestamptz(3)
  application_end   DateTime?     @db.Timestamptz(3)
  link              String?
  image             String?
  dccs              DCCOutreach[]

  @@map("outreach")
}

model DCCOutreach {
  outreach    Outreach @relation(fields: [outreach_id], references: [id])
  outreach_id String
  dcc         DCC      @relation(fields: [dcc_id], references: [id])
  dcc_id      String

  @@id([outreach_id, dcc_id])
  @@map("dcc_outreach")
}

model Tool {
  id           String        @id @default(uuid())
  label        String
  description  String?
  url          String
  icon         String?
  publications Publication[]

  @@map("tools")
}

model DccAsset {
  dcc_id           String
  dcc              DCC?                @relation(fields: [dcc_id], references: [id])
  filetype         String
  filename         String
  link             String              @unique
  size             BigInt?
  lastmodified     DateTime            @default(now())
  current          Boolean             @default(true)
  creator          String?
  creatorId        User?               @relation(fields: [creator], references: [email])
  dccapproved      Boolean             @default(false)
  drcapproved      Boolean             @default(false)
  annotation       Json?               @db.JsonB
  library          GeneSetLibraryNode?
  c2m2_datapackage C2M2Datapackage?
  node             DCCAssetNode?
  shaChecksum      String?

  @@id([dcc_id, filetype, link, lastmodified])
  @@unique([dcc_id, filetype, link, lastmodified])
  @@map("dcc_assets")
}

// Processed data search
enum NodeType {
  entity
  gene_set
  gene_set_library
  c2m2_file
  kg_relation
  dcc_asset
}

model Node {
  dcc_id      String?
  id          String                   @id @db.Uuid
  type        NodeType
  label       String
  description String
  searchable  Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, ((label || ' '::text) || description))"))

  dcc              DCC?                @relation(fields: [dcc_id], references: [id])
  entity           EntityNode?
  gene_set         GeneSetNode?
  gene_set_library GeneSetLibraryNode?
  c2m2_file        C2M2FileNode?
  kg_relation_node KGRelationNode?
  dcc_asset        DCCAssetNode?

  @@index([type])
  @@index([label(ops: raw("gin_trgm_ops"))], map: "node_label_trgm", type: Gin)
  @@index([searchable], map: "node_searchable_fts", type: Gin)
  @@map("node")
}

model EntityNode {
  id   String @id @db.Uuid
  type String

  node             Node          @relation(fields: [id], references: [id])
  sourceAssertions KGAssertion[] @relation("source")
  targetAssertions KGAssertion[] @relation("target")
  gene             GeneEntity?

  @@map("entity_node")
}

model KGRelationNode {
  id String @id @db.Uuid

  node       Node          @relation(fields: [id], references: [id])
  assertions KGAssertion[]

  @@map("kg_relation_node")
}

model KGAssertion {
  id          String  @id @db.Uuid
  relation_id String  @db.Uuid
  source_id   String  @db.Uuid
  target_id   String  @db.Uuid
  dcc_id      String?
  SAB         String
  evidence    Json?

  dcc      DCC?           @relation(fields: [dcc_id], references: [id])
  relation KGRelationNode @relation(fields: [relation_id], references: [id])
  source   EntityNode     @relation("source", fields: [source_id], references: [id])
  target   EntityNode     @relation("target", fields: [target_id], references: [id])

  @@map("kg_assertion")
}

model GeneEntity {
  id      String @id @db.Uuid
  entrez  String
  ensembl String

  entity             EntityNode           @relation(fields: [id], references: [id])
  gene_set_libraries GeneSetLibraryNode[]
  gene_sets          GeneSetNode[]

  @@map("gene_entity")
}

model GeneSetNode {
  id                  String @id @db.Uuid
  gene_set_library_id String @db.Uuid

  node             Node               @relation(fields: [id], references: [id])
  gene_set_library GeneSetLibraryNode @relation(fields: [gene_set_library_id], references: [id])
  genes            GeneEntity[]

  @@map("gene_set_node")
}

model GeneSetLibraryNode {
  id             String @id @db.Uuid
  dcc_asset_link String @unique

  node      Node          @relation(fields: [id], references: [id])
  genes     GeneEntity[]
  gene_sets GeneSetNode[]
  dcc_asset DccAsset      @relation(fields: [dcc_asset_link], references: [link], onDelete: Cascade)

  @@map("gene_set_library_node")
}

model C2M2FileNode {
  id                  String    @id @db.Uuid
  c2m2_datapackage_id String    @db.Uuid
  creation_time       DateTime? @db.Timestamptz()
  persistent_id       String?
  size_in_bytes       BigInt?
  file_format         String?
  data_type           String?
  assay_type          String?

  node             Node            @relation(fields: [id], references: [id])
  c2m2_datapackage C2M2Datapackage @relation(fields: [c2m2_datapackage_id], references: [id], onDelete: Cascade)

  @@map("c2m2_file_node")
}

model C2M2Datapackage {
  id             String @id @db.Uuid
  dcc_asset_link String @unique

  c2m2_files C2M2FileNode[]
  dcc_asset  DccAsset       @relation(fields: [dcc_asset_link], references: [link], onDelete: Cascade)

  @@map("c2m2_datapackage")
}

model DCCAssetNode {
  id        String   @id @db.Uuid
  link      String   @unique
  node      Node     @relation(fields: [id], references: [id])
  dcc_asset DccAsset @relation(fields: [link], references: [link])

  @@map("dcc_asset_node")
}

// End processed data search

// Next-Auth schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  dcc           String?
  role          Role       @default(USER)
  dccAsset      DccAsset[]
}

enum Role {
  USER
  DCC_APPROVER
  UPLOADER
  DRC_APPROVER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End Next-Auth schema
