CREATE CONSTRAINT constraint_CONTAINS__uuid IF NOT EXISTS FOR ()-[r:CONTAINS]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_HAS_SOURCE__uuid IF NOT EXISTS FOR ()-[r:HAS_SOURCE]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_ASSOCIATED_WITH__uuid IF NOT EXISTS FOR ()-[r:ASSOCIATED_WITH]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_SAMPLED_FROM__uuid IF NOT EXISTS FOR ()-[r:SAMPLED_FROM]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_PREPPED_VIA__uuid IF NOT EXISTS FOR ()-[r:PREPPED_VIA]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_GENERATED_BY_ASSAY_TYPE__uuid IF NOT EXISTS FOR ()-[r:GENERATED_BY_ASSAY_TYPE]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_FILE_FORMAT__uuid IF NOT EXISTS FOR ()-[r:IS_FILE_FORMAT]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_GENERATED_BY_ANALYSIS_TYPE__uuid IF NOT EXISTS FOR ()-[r:GENERATED_BY_ANALYSIS_TYPE]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_DATA_TYPE__uuid IF NOT EXISTS FOR ()-[r:IS_DATA_TYPE]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_GRANULARITY__uuid IF NOT EXISTS FOR ()-[r:IS_GRANULARITY]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_SEX__uuid IF NOT EXISTS FOR ()-[r:IS_SEX]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_ETHNICITY__uuid IF NOT EXISTS FOR ()-[r:IS_ETHNICITY]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_DEFINED_BY__uuid IF NOT EXISTS FOR ()-[r:DEFINED_BY]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_SUPERSET_OF__uuid IF NOT EXISTS FOR ()-[r:IS_SUPERSET_OF]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_PARENT_OF__uuid IF NOT EXISTS FOR ()-[r:IS_PARENT_OF]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_DESCRIBES__uuid IF NOT EXISTS FOR ()-[r:DESCRIBES]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_TESTED_FOR__uuid IF NOT EXISTS FOR ()-[r:TESTED_FOR]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_IS_RACE__uuid IF NOT EXISTS FOR ()-[r:IS_RACE]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_HAS_SYNONYM__uuid IF NOT EXISTS FOR ()-[r:HAS_SYNONYM]->() REQUIRE (r._uuid) IS UNIQUE;
CREATE CONSTRAINT constraint_REGISTERED__uuid IF NOT EXISTS FOR ()-[r:REGISTERED]->() REQUIRE (r._uuid) IS UNIQUE;