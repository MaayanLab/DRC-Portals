------------ dcc_short_labels:['4DN', 'ERCC', 'GTEx', 'GlyGen', 'HMP', 'HuBMAP', 'IDG', 'KidsFirst', 'LINCS', 'Metabolomics', 'MoTrPAC', 'SPARC']
********** DCC name (dcc_short_label) specified as an argument: SPARC; will use schema_name: sparc, so, will ingest only from that DCC.
DROP SCHEMA IF EXISTS sparc CASCADE;
Creating sparc
=================== table_name: file ===========================
---- Column name: id_namespace: information read ----
---- Column name: local_id: information read ----
---- Column name: project_id_namespace: information read ----
---- Column name: project_local_id: information read ----
---- Column name: persistent_id: information read ----
---- Column name: creation_time: information read ----
---- Column name: size_in_bytes: information read ----
---- Column name: uncompressed_size_in_bytes: information read ----
---- Column name: sha256: information read ----
---- Column name: md5: information read ----
---- Column name: filename: information read ----
---- Column name: file_format: information read ----
---- Column name: compression_format: information read ----
---- Column name: data_type: information read ----
---- Column name: assay_type: information read ----
---- Column name: analysis_type: information read ----
---- Column name: mime_type: information read ----
---- Column name: bundle_collection_id_namespace: information read ----
---- Column name: bundle_collection_local_id: information read ----
---- Column name: dbgap_study_id: information read ----
create_table_query:
CREATE TABLE sparc.file (
id_namespace VARCHAR NOT NULL, 
local_id VARCHAR NOT NULL, 
project_id_namespace VARCHAR NOT NULL, 
project_local_id VARCHAR NOT NULL, 
persistent_id VARCHAR DEFAULT '', 
creation_time VARCHAR DEFAULT '', 
size_in_bytes VARCHAR DEFAULT '', 
uncompressed_size_in_bytes VARCHAR DEFAULT '', 
sha256 VARCHAR DEFAULT '', 
md5 VARCHAR DEFAULT '', 
filename VARCHAR NOT NULL, 
file_format VARCHAR DEFAULT '', 
compression_format VARCHAR DEFAULT '', 
data_type VARCHAR DEFAULT '', 
assay_type VARCHAR DEFAULT '', 
analysis_type VARCHAR DEFAULT '', 
mime_type VARCHAR DEFAULT '', 
bundle_collection_id_namespace VARCHAR DEFAULT '', 
bundle_collection_local_id VARCHAR DEFAULT '', 
dbgap_study_id VARCHAR DEFAULT '',
PRIMARY KEY(id_namespace, local_id)
);
=================== table_name: biosample ===========================
---- Column name: id_namespace: information read ----
---- Column name: local_id: information read ----
---- Column name: project_id_namespace: information read ----
---- Column name: project_local_id: information read ----
---- Column name: persistent_id: information read ----
---- Column name: creation_time: information read ----
---- Column name: sample_prep_method: information read ----
---- Column name: anatomy: information read ----
create_table_query:
CREATE TABLE sparc.biosample (
id_namespace VARCHAR NOT NULL, 
local_id VARCHAR NOT NULL, 
project_id_namespace VARCHAR NOT NULL, 
project_local_id VARCHAR NOT NULL, 
persistent_id VARCHAR DEFAULT '', 
creation_time VARCHAR DEFAULT '', 
sample_prep_method VARCHAR DEFAULT '', 
anatomy VARCHAR DEFAULT '',
PRIMARY KEY(id_namespace, local_id)
);
=================== table_name: subject ===========================
---- Column name: id_namespace: information read ----
---- Column name: local_id: information read ----
---- Column name: project_id_namespace: information read ----
---- Column name: project_local_id: information read ----
---- Column name: persistent_id: information read ----
---- Column name: creation_time: information read ----
---- Column name: granularity: information read ----
---- Column name: sex: information read ----
---- Column name: ethnicity: information read ----
---- Column name: age_at_enrollment: information read ----
create_table_query:
CREATE TABLE sparc.subject (
id_namespace VARCHAR NOT NULL, 
local_id VARCHAR NOT NULL, 
project_id_namespace VARCHAR NOT NULL, 
project_local_id VARCHAR NOT NULL, 
persistent_id VARCHAR DEFAULT '', 
creation_time VARCHAR DEFAULT '', 
granularity VARCHAR NOT NULL, 
sex VARCHAR DEFAULT '', 
ethnicity VARCHAR DEFAULT '', 
age_at_enrollment VARCHAR DEFAULT '',
PRIMARY KEY(id_namespace, local_id)
);
=================== table_name: dcc ===========================
---- Column name: id: information read ----
---- Column name: dcc_name: information read ----
---- Column name: dcc_abbreviation: information read ----
---- Column name: dcc_description: information read ----
---- Column name: contact_email: information read ----
---- Column name: contact_name: information read ----
---- Column name: dcc_url: information read ----
---- Column name: project_id_namespace: information read ----
---- Column name: project_local_id: information read ----
create_table_query:
CREATE TABLE sparc.dcc (
id VARCHAR NOT NULL, 
dcc_name VARCHAR NOT NULL, 
dcc_abbreviation VARCHAR NOT NULL, 
dcc_description VARCHAR DEFAULT '', 
contact_email VARCHAR NOT NULL, 
contact_name VARCHAR NOT NULL, 
dcc_url VARCHAR NOT NULL, 
project_id_namespace VARCHAR NOT NULL, 
project_local_id VARCHAR NOT NULL,
PRIMARY KEY(id)
);
=================== table_name: project ===========================
---- Column name: id_namespace: information read ----
---- Column name: local_id: information read ----
---- Column name: persistent_id: information read ----
---- Column name: creation_time: information read ----
---- Column name: abbreviation: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
create_table_query:
CREATE TABLE sparc.project (
id_namespace VARCHAR NOT NULL, 
local_id VARCHAR NOT NULL, 
persistent_id VARCHAR DEFAULT '', 
creation_time VARCHAR DEFAULT '', 
abbreviation VARCHAR DEFAULT '', 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '',
PRIMARY KEY(id_namespace, local_id)
);
=================== table_name: project_in_project ===========================
---- Column name: parent_project_id_namespace: information read ----
---- Column name: parent_project_local_id: information read ----
---- Column name: child_project_id_namespace: information read ----
---- Column name: child_project_local_id: information read ----
create_table_query:
CREATE TABLE sparc.project_in_project (
parent_project_id_namespace VARCHAR NOT NULL, 
parent_project_local_id VARCHAR NOT NULL, 
child_project_id_namespace VARCHAR NOT NULL, 
child_project_local_id VARCHAR NOT NULL,
PRIMARY KEY(parent_project_id_namespace, parent_project_local_id, child_project_id_namespace, child_project_local_id)
);
=================== table_name: collection ===========================
---- Column name: id_namespace: information read ----
---- Column name: local_id: information read ----
---- Column name: persistent_id: information read ----
---- Column name: creation_time: information read ----
---- Column name: abbreviation: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: has_time_series_data: information read ----
create_table_query:
CREATE TABLE sparc.collection (
id_namespace VARCHAR NOT NULL, 
local_id VARCHAR NOT NULL, 
persistent_id VARCHAR DEFAULT '', 
creation_time VARCHAR DEFAULT '', 
abbreviation VARCHAR DEFAULT '', 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
has_time_series_data VARCHAR DEFAULT '',
PRIMARY KEY(id_namespace, local_id)
);
=================== table_name: collection_in_collection ===========================
---- Column name: superset_collection_id_namespace: information read ----
---- Column name: superset_collection_local_id: information read ----
---- Column name: subset_collection_id_namespace: information read ----
---- Column name: subset_collection_local_id: information read ----
create_table_query:
CREATE TABLE sparc.collection_in_collection (
superset_collection_id_namespace VARCHAR NOT NULL, 
superset_collection_local_id VARCHAR NOT NULL, 
subset_collection_id_namespace VARCHAR NOT NULL, 
subset_collection_local_id VARCHAR NOT NULL,
PRIMARY KEY(superset_collection_id_namespace, superset_collection_local_id, subset_collection_id_namespace, subset_collection_local_id)
);
=================== table_name: file_describes_collection ===========================
---- Column name: file_id_namespace: information read ----
---- Column name: file_local_id: information read ----
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
create_table_query:
CREATE TABLE sparc.file_describes_collection (
file_id_namespace VARCHAR NOT NULL, 
file_local_id VARCHAR NOT NULL, 
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL,
PRIMARY KEY(file_id_namespace, file_local_id, collection_id_namespace, collection_local_id)
);
=================== table_name: collection_defined_by_project ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: project_id_namespace: information read ----
---- Column name: project_local_id: information read ----
create_table_query:
CREATE TABLE sparc.collection_defined_by_project (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
project_id_namespace VARCHAR NOT NULL, 
project_local_id VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, project_id_namespace, project_local_id)
);
=================== table_name: file_in_collection ===========================
---- Column name: file_id_namespace: information read ----
---- Column name: file_local_id: information read ----
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
create_table_query:
CREATE TABLE sparc.file_in_collection (
file_id_namespace VARCHAR NOT NULL, 
file_local_id VARCHAR NOT NULL, 
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL,
PRIMARY KEY(file_id_namespace, file_local_id, collection_id_namespace, collection_local_id)
);
=================== table_name: biosample_in_collection ===========================
---- Column name: biosample_id_namespace: information read ----
---- Column name: biosample_local_id: information read ----
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
create_table_query:
CREATE TABLE sparc.biosample_in_collection (
biosample_id_namespace VARCHAR NOT NULL, 
biosample_local_id VARCHAR NOT NULL, 
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL,
PRIMARY KEY(biosample_id_namespace, biosample_local_id, collection_id_namespace, collection_local_id)
);
=================== table_name: subject_in_collection ===========================
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
create_table_query:
CREATE TABLE sparc.subject_in_collection (
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL,
PRIMARY KEY(subject_id_namespace, subject_local_id, collection_id_namespace, collection_local_id)
);
=================== table_name: file_describes_biosample ===========================
---- Column name: file_id_namespace: information read ----
---- Column name: file_local_id: information read ----
---- Column name: biosample_id_namespace: information read ----
---- Column name: biosample_local_id: information read ----
create_table_query:
CREATE TABLE sparc.file_describes_biosample (
file_id_namespace VARCHAR NOT NULL, 
file_local_id VARCHAR NOT NULL, 
biosample_id_namespace VARCHAR NOT NULL, 
biosample_local_id VARCHAR NOT NULL,
PRIMARY KEY(file_id_namespace, file_local_id, biosample_id_namespace, biosample_local_id)
);
=================== table_name: file_describes_subject ===========================
---- Column name: file_id_namespace: information read ----
---- Column name: file_local_id: information read ----
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
create_table_query:
CREATE TABLE sparc.file_describes_subject (
file_id_namespace VARCHAR NOT NULL, 
file_local_id VARCHAR NOT NULL, 
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL,
PRIMARY KEY(file_id_namespace, file_local_id, subject_id_namespace, subject_local_id)
);
=================== table_name: biosample_from_subject ===========================
---- Column name: biosample_id_namespace: information read ----
---- Column name: biosample_local_id: information read ----
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: age_at_sampling: information read ----
create_table_query:
CREATE TABLE sparc.biosample_from_subject (
biosample_id_namespace VARCHAR NOT NULL, 
biosample_local_id VARCHAR NOT NULL, 
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
age_at_sampling VARCHAR DEFAULT '',
PRIMARY KEY(biosample_id_namespace, biosample_local_id, subject_id_namespace, subject_local_id)
);
=================== table_name: biosample_disease ===========================
---- Column name: biosample_id_namespace: information read ----
---- Column name: biosample_local_id: information read ----
---- Column name: association_type: information read ----
---- Column name: disease: information read ----
create_table_query:
CREATE TABLE sparc.biosample_disease (
biosample_id_namespace VARCHAR NOT NULL, 
biosample_local_id VARCHAR NOT NULL, 
association_type VARCHAR NOT NULL, 
disease VARCHAR NOT NULL,
PRIMARY KEY(biosample_id_namespace, biosample_local_id, association_type, disease)
);
=================== table_name: subject_disease ===========================
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: association_type: information read ----
---- Column name: disease: information read ----
create_table_query:
CREATE TABLE sparc.subject_disease (
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
association_type VARCHAR NOT NULL, 
disease VARCHAR NOT NULL,
PRIMARY KEY(subject_id_namespace, subject_local_id, association_type, disease)
);
=================== table_name: collection_disease ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: disease: information read ----
create_table_query:
CREATE TABLE sparc.collection_disease (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
disease VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, disease)
);
=================== table_name: collection_phenotype ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: phenotype: information read ----
create_table_query:
CREATE TABLE sparc.collection_phenotype (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
phenotype VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, phenotype)
);
=================== table_name: collection_gene ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: gene: information read ----
create_table_query:
CREATE TABLE sparc.collection_gene (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
gene VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, gene)
);
=================== table_name: collection_compound ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: compound: information read ----
create_table_query:
CREATE TABLE sparc.collection_compound (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
compound VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, compound)
);
=================== table_name: collection_substance ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: substance: information read ----
create_table_query:
CREATE TABLE sparc.collection_substance (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
substance VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, substance)
);
=================== table_name: collection_taxonomy ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: taxon: information read ----
create_table_query:
CREATE TABLE sparc.collection_taxonomy (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
taxon VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, taxon)
);
=================== table_name: collection_anatomy ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: anatomy: information read ----
create_table_query:
CREATE TABLE sparc.collection_anatomy (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
anatomy VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, anatomy)
);
=================== table_name: collection_protein ===========================
---- Column name: collection_id_namespace: information read ----
---- Column name: collection_local_id: information read ----
---- Column name: protein: information read ----
create_table_query:
CREATE TABLE sparc.collection_protein (
collection_id_namespace VARCHAR NOT NULL, 
collection_local_id VARCHAR NOT NULL, 
protein VARCHAR NOT NULL,
PRIMARY KEY(collection_id_namespace, collection_local_id, protein)
);
=================== table_name: subject_phenotype ===========================
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: association_type: information read ----
---- Column name: phenotype: information read ----
create_table_query:
CREATE TABLE sparc.subject_phenotype (
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
association_type VARCHAR NOT NULL, 
phenotype VARCHAR NOT NULL,
PRIMARY KEY(subject_id_namespace, subject_local_id, association_type, phenotype)
);
=================== table_name: biosample_substance ===========================
---- Column name: biosample_id_namespace: information read ----
---- Column name: biosample_local_id: information read ----
---- Column name: substance: information read ----
create_table_query:
CREATE TABLE sparc.biosample_substance (
biosample_id_namespace VARCHAR NOT NULL, 
biosample_local_id VARCHAR NOT NULL, 
substance VARCHAR NOT NULL,
PRIMARY KEY(biosample_id_namespace, biosample_local_id, substance)
);
=================== table_name: subject_substance ===========================
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: substance: information read ----
create_table_query:
CREATE TABLE sparc.subject_substance (
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
substance VARCHAR NOT NULL,
PRIMARY KEY(subject_id_namespace, subject_local_id, substance)
);
=================== table_name: biosample_gene ===========================
---- Column name: biosample_id_namespace: information read ----
---- Column name: biosample_local_id: information read ----
---- Column name: gene: information read ----
create_table_query:
CREATE TABLE sparc.biosample_gene (
biosample_id_namespace VARCHAR NOT NULL, 
biosample_local_id VARCHAR NOT NULL, 
gene VARCHAR NOT NULL,
PRIMARY KEY(biosample_id_namespace, biosample_local_id, gene)
);
=================== table_name: phenotype_gene ===========================
---- Column name: phenotype: information read ----
---- Column name: gene: information read ----
create_table_query:
CREATE TABLE sparc.phenotype_gene (
phenotype VARCHAR NOT NULL, 
gene VARCHAR NOT NULL,
PRIMARY KEY(phenotype, gene)
);
=================== table_name: phenotype_disease ===========================
---- Column name: phenotype: information read ----
---- Column name: disease: information read ----
create_table_query:
CREATE TABLE sparc.phenotype_disease (
phenotype VARCHAR NOT NULL, 
disease VARCHAR NOT NULL,
PRIMARY KEY(phenotype, disease)
);
=================== table_name: subject_race ===========================
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: race: information read ----
create_table_query:
CREATE TABLE sparc.subject_race (
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
race VARCHAR DEFAULT '',
PRIMARY KEY(subject_id_namespace, subject_local_id, race)
);
=================== table_name: subject_role_taxonomy ===========================
---- Column name: subject_id_namespace: information read ----
---- Column name: subject_local_id: information read ----
---- Column name: role_id: information read ----
---- Column name: taxonomy_id: information read ----
create_table_query:
CREATE TABLE sparc.subject_role_taxonomy (
subject_id_namespace VARCHAR NOT NULL, 
subject_local_id VARCHAR NOT NULL, 
role_id VARCHAR NOT NULL, 
taxonomy_id VARCHAR NOT NULL,
PRIMARY KEY(subject_id_namespace, subject_local_id, role_id, taxonomy_id)
);
=================== table_name: assay_type ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.assay_type (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: analysis_type ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.analysis_type (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: ncbi_taxonomy ===========================
---- Column name: id: information read ----
---- Column name: clade: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.ncbi_taxonomy (
id VARCHAR NOT NULL, 
clade VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: anatomy ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.anatomy (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: file_format ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.file_format (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: data_type ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.data_type (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: disease ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.disease (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: phenotype ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.phenotype (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: compound ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.compound (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: substance ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
---- Column name: compound: information read ----
create_table_query:
CREATE TABLE sparc.substance (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '', 
compound VARCHAR NOT NULL,
PRIMARY KEY(id)
);
=================== table_name: gene ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
---- Column name: organism: information read ----
create_table_query:
CREATE TABLE sparc.gene (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '', 
organism VARCHAR NOT NULL,
PRIMARY KEY(id)
);
=================== table_name: protein ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
---- Column name: organism: information read ----
create_table_query:
CREATE TABLE sparc.protein (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '', 
organism VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: protein_gene ===========================
---- Column name: protein: information read ----
---- Column name: gene: information read ----
create_table_query:
CREATE TABLE sparc.protein_gene (
protein VARCHAR NOT NULL, 
gene VARCHAR NOT NULL,
PRIMARY KEY(protein, gene)
);
=================== table_name: sample_prep_method ===========================
---- Column name: id: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
---- Column name: synonyms: information read ----
create_table_query:
CREATE TABLE sparc.sample_prep_method (
id VARCHAR NOT NULL, 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '', 
synonyms VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
=================== table_name: id_namespace ===========================
---- Column name: id: information read ----
---- Column name: abbreviation: information read ----
---- Column name: name: information read ----
---- Column name: description: information read ----
create_table_query:
CREATE TABLE sparc.id_namespace (
id VARCHAR NOT NULL, 
abbreviation VARCHAR DEFAULT '', 
name VARCHAR NOT NULL, 
description VARCHAR DEFAULT '',
PRIMARY KEY(id)
);
================== Defined all tables ======================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Time taken to define table: 0.1625208854675293 seconds.

Names of all tables:
['file', 'biosample', 'subject', 'dcc', 'project', 'project_in_project', 'collection', 'collection_in_collection', 'file_describes_collection', 'collection_defined_by_project', 'file_in_collection', 'biosample_in_collection', 'subject_in_collection', 'file_describes_biosample', 'file_describes_subject', 'biosample_from_subject', 'biosample_disease', 'subject_disease', 'collection_disease', 'collection_phenotype', 'collection_gene', 'collection_compound', 'collection_substance', 'collection_taxonomy', 'collection_anatomy', 'collection_protein', 'subject_phenotype', 'biosample_substance', 'subject_substance', 'biosample_gene', 'phenotype_gene', 'phenotype_disease', 'subject_race', 'subject_role_taxonomy', 'assay_type', 'analysis_type', 'ncbi_taxonomy', 'anatomy', 'file_format', 'data_type', 'disease', 'phenotype', 'compound', 'substance', 'gene', 'protein', 'protein_gene', 'sample_prep_method', 'id_namespace']

Going to ingest metadata from files


********* c2m2s dataframe, before checking if a single DCC is to be processed, is: **********
    filetype  ... dcc_short_label
30      C2M2  ...             4DN
31      C2M2  ...    Metabolomics
32      C2M2  ...          GlyGen
33      C2M2  ...          HuBMAP
34      C2M2  ...       KidsFirst
35      C2M2  ...           SPARC
74      C2M2  ...            ERCC
81      C2M2  ...         MoTrPAC
93      C2M2  ...            GTEx
107     C2M2  ...             HMP
123     C2M2  ...             IDG
146     C2M2  ...           LINCS

[12 rows x 14 columns]

********* c2m2s dataframe is: **********
   filetype                   filename  ...                  created  dcc_short_label
35     C2M2  c2m2_2024JUN15_submit.zip  ...  2024-06-15 22:50:35.958            SPARC

[1 rows x 14 columns]
Processing C2M2 Files...:   0%|          | 0/1 [00:00<?, ?it/s]
================================== DCC short label: SPARC =============================================
Unpack zip file: c2m2_extract_path: ingest/c2m2s/SPARC/c2m2_2024JUN15_submit
--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/dcc.tsv ---------
table_name:dcc
SPARC: dcc: Read from file: df: #rows = 1, #cols: 9

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/dcc.tsv: 2
df: #rows = 1, #cols: 9
pKeys: ['id']
*** Entering dcc to database ***
df: #rows = 1, #cols: 9

A slice of df:
                        id  ...             contact_email
0  cfde_registry_dcc:sparc  ...  jeffrey.grethe@gmail.com

[1 rows x 5 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.10335969924926758 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/id_namespace.tsv ---------
table_name:id_namespace
SPARC: id_namespace: Read from file: df: #rows = 6, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/id_namespace.tsv: 7
df: #rows = 6, #cols: 4
pKeys: ['id']
*** Entering id_namespace to database ***
df: #rows = 6, #cols: 4

A slice of df:
                  id  ...                                        description
0             SPARC:  ...  The default identifier namespace for C2M2 enti...
1        SPARC.file:  ...  The identifier namespace for C2M2 file records...
2     SPARC.project:  ...  The identifier namespace for C2M2 project reco...
3  SPARC.collection:  ...  The identifier namespace for C2M2 collection r...
4     SPARC.subject:  ...  The identifier namespace for C2M2 subject reco...
5      SPARC.sample:  ...  The identifier namespace for C2M2 sample recor...

[6 rows x 4 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.08997702598571777 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/disease.tsv ---------
table_name:disease
SPARC: disease: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/disease.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.03630828857421875 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/data_type.tsv ---------
table_name:data_type
SPARC: data_type: Read from file: df: #rows = 6, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/data_type.tsv: 7
df: #rows = 6, #cols: 4
pKeys: ['id']
*** Entering data_type to database ***
df: #rows = 6, #cols: 4

A slice of df:
          id  ... synonyms
0  data:2968  ...       []
1  data:3108  ...       []
2  data:3869  ...       []
3  data:0006  ...       []
4  data:0928  ...       []
5  data:2044  ...       []

[6 rows x 4 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.0882265567779541 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_disease.tsv ---------
table_name:collection_disease
SPARC: collection_disease: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_disease.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.03719449043273926 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_in_collection.tsv ---------
table_name:file_in_collection
SPARC: file_in_collection: Read from file: df: #rows = 101283, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_in_collection.tsv: 101284
df: #rows = 101283, #cols: 4
pKeys: ['file_id_namespace', 'file_local_id', 'collection_id_namespace', 'collection_local_id']
Going to write the count query
Wrote the count query
*** Entering file_in_collection to database ***
df: #rows = 101283, #cols: 4

A slice of df:
  file_id_namespace  ...                             collection_local_id
0       SPARC.file:  ...  N:dataset:6f7e029d-684e-4603-9dea-ec82a53c5a75
1       SPARC.file:  ...  N:dataset:a59a7c4c-0978-4bbe-8d92-93218b5c7b31
2       SPARC.file:  ...  N:dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555
3       SPARC.file:  ...  N:dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555
4       SPARC.file:  ...  N:dataset:9472e802-7896-4adf-a34b-1e9af1bf2cbe
5       SPARC.file:  ...  N:dataset:c46429b9-6db2-40ad-86e5-36ed759a1ee7
6       SPARC.file:  ...  N:dataset:9dd891fc-6d47-4821-95a0-fc7ff2aeee41
7       SPARC.file:  ...  N:dataset:199eb37d-5f1d-4848-98a5-ab105dae48ea
8       SPARC.file:  ...  N:dataset:e1f838d8-09d4-4648-a977-08d6358a390c
9       SPARC.file:  ...  N:dataset:834e182d-b52c-4389-ad09-6ec9467f3b55

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:     count
0  101283
count:101283
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 1.879490613937378 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_role_taxonomy.tsv ---------
table_name:subject_role_taxonomy
SPARC: subject_role_taxonomy: Read from file: df: #rows = 3569, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_role_taxonomy.tsv: 3570
df: #rows = 3569, #cols: 4
pKeys: ['subject_id_namespace', 'subject_local_id', 'role_id', 'taxonomy_id']
Going to write the count query
Wrote the count query
*** Entering subject_role_taxonomy to database ***
df: #rows = 3569, #cols: 4

A slice of df:
  subject_id_namespace  ...    taxonomy_id
0       SPARC.subject:  ...  NCBI:txid9940
1       SPARC.subject:  ...  NCBI:txid9825
2       SPARC.subject:  ...  NCBI:txid9825
3       SPARC.subject:  ...  NCBI:txid9825
4       SPARC.subject:  ...  NCBI:txid9825
5       SPARC.subject:  ...  NCBI:txid9825
6       SPARC.subject:  ...  NCBI:txid9825
7       SPARC.subject:  ...  NCBI:txid9825
8       SPARC.subject:  ...  NCBI:txid9825
9       SPARC.subject:  ...  NCBI:txid9825

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:    count
0   3569
count:3569
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.16436266899108887 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_in_collection.tsv ---------
table_name:biosample_in_collection
SPARC: biosample_in_collection: Read from file: df: #rows = 5414, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_in_collection.tsv: 5415
df: #rows = 5414, #cols: 4
pKeys: ['biosample_id_namespace', 'biosample_local_id', 'collection_id_namespace', 'collection_local_id']
Going to write the count query
Wrote the count query
*** Entering biosample_in_collection to database ***
df: #rows = 5414, #cols: 4

A slice of df:
  biosample_id_namespace  ...                             collection_local_id
0          SPARC.sample:  ...  N:dataset:36b1a054-d05c-46ea-ade1-84cfe2a15a6c
1          SPARC.sample:  ...  N:dataset:36b1a054-d05c-46ea-ade1-84cfe2a15a6c
2          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
3          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
4          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
5          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
6          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
7          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
8          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
9          SPARC.sample:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:    count
0   5414
count:5414
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.20099496841430664 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_phenotype.tsv ---------
table_name:subject_phenotype
SPARC: subject_phenotype: Read from file: df: #rows = 0, #cols: 4

/home/mano/DRC/DRC-Portals/database/C2M2/populateC2M2FromS3.py:326: DtypeWarning: Columns (19) have mixed types. Specify dtype option on import or set low_memory=False.
  df = pd.read_csv(table_str, delimiter='\t');
#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_phenotype.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.036363840103149414 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/phenotype_disease.tsv ---------
table_name:phenotype_disease
SPARC: phenotype_disease: Read from file: df: #rows = 0, #cols: 2

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/phenotype_disease.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.03690052032470703 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_compound.tsv ---------
table_name:collection_compound
SPARC: collection_compound: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_compound.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.03577542304992676 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/protein_gene.tsv ---------
table_name:protein_gene
SPARC: protein_gene: Read from file: df: #rows = 0, #cols: 2

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/protein_gene.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.03784990310668945 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/phenotype_gene.tsv ---------
table_name:phenotype_gene
SPARC: phenotype_gene: Read from file: df: #rows = 0, #cols: 2

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/phenotype_gene.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.04246115684509277 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/phenotype.tsv ---------
table_name:phenotype
SPARC: phenotype: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/phenotype.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.046961307525634766 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_disease.tsv ---------
table_name:subject_disease
SPARC: subject_disease: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_disease.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.05498695373535156 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_phenotype.tsv ---------
table_name:collection_phenotype
SPARC: collection_phenotype: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_phenotype.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.05274772644042969 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/protein.tsv ---------
table_name:protein
SPARC: protein: Read from file: df: #rows = 0, #cols: 5

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/protein.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.05518317222595215 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/ncbi_taxonomy.tsv ---------
table_name:ncbi_taxonomy
SPARC: ncbi_taxonomy: Read from file: df: #rows = 11, #cols: 5

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/ncbi_taxonomy.tsv: 12
df: #rows = 11, #cols: 5
pKeys: ['id']
*** Entering ncbi_taxonomy to database ***
df: #rows = 11, #cols: 5

A slice of df:
               id  ... synonyms
0  NCBI:txid10116  ...       []
1   NCBI:txid9823  ...       []
2   NCBI:txid9685  ...       []
3  NCBI:txid10090  ...       []
4   NCBI:txid9825  ...       []
5   NCBI:txid9606  ...       []
6   NCBI:txid9615  ...       []
7   NCBI:txid9669  ...       []
8  NCBI:txid40674  ...       []
9  NCBI:txid10114  ...       []

[10 rows x 5 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.08399367332458496 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_protein.tsv ---------
table_name:collection_protein
SPARC: collection_protein: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_protein.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.037648677825927734 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/analysis_type.tsv ---------
table_name:analysis_type
SPARC: analysis_type: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/analysis_type.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.037152767181396484 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_describes_biosample.tsv ---------
table_name:file_describes_biosample
SPARC: file_describes_biosample: Read from file: df: #rows = 101283, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_describes_biosample.tsv: 101284
df: #rows = 101283, #cols: 4
pKeys: ['file_id_namespace', 'file_local_id', 'biosample_id_namespace', 'biosample_local_id']
Going to write the count query
Wrote the count query
*** Entering file_describes_biosample to database ***
df: #rows = 101283, #cols: 4

A slice of df:
  file_id_namespace  ...                                 biosample_local_id
0       SPARC.file:  ...  N:dataset:6f7e029d-684e-4603-9dea-ec82a53c5a75...
1       SPARC.file:  ...  N:dataset:a59a7c4c-0978-4bbe-8d92-93218b5c7b31...
2       SPARC.file:  ...  N:dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555...
3       SPARC.file:  ...  N:dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555...
4       SPARC.file:  ...  N:dataset:9472e802-7896-4adf-a34b-1e9af1bf2cbe...
5       SPARC.file:  ...  N:dataset:c46429b9-6db2-40ad-86e5-36ed759a1ee7...
6       SPARC.file:  ...  N:dataset:9dd891fc-6d47-4821-95a0-fc7ff2aeee41...
7       SPARC.file:  ...  N:dataset:199eb37d-5f1d-4848-98a5-ab105dae48ea...
8       SPARC.file:  ...  N:dataset:e1f838d8-09d4-4648-a977-08d6358a390c...
9       SPARC.file:  ...  N:dataset:834e182d-b52c-4389-ad09-6ec9467f3b55...

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:     count
0  101283
count:101283
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 1.933396577835083 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file.tsv ---------
table_name:file
SPARC: file: Read from file: df: #rows = 101283, #cols: 20

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file.tsv: 101284
df: #rows = 101283, #cols: 20
pKeys: ['id_namespace', 'local_id']
Going to write the count query
Wrote the count query
*** Entering file to database ***
df: #rows = 101283, #cols: 20

A slice of df:
  id_namespace  ...                                      persistent_id
0  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
1  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
2  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
3  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
4  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
5  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
6  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
7  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
8  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...
9  SPARC.file:  ...  https://discover.pennsieve.io/package/N:packag...

[10 rows x 5 columns]
Data inserted successfully!
sql_count_df:     count
0  101283
count:101283
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 6.437465667724609 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_gene.tsv ---------
table_name:collection_gene
SPARC: collection_gene: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_gene.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.07465457916259766 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_from_subject.tsv ---------
table_name:biosample_from_subject
SPARC: biosample_from_subject: Read from file: df: #rows = 5414, #cols: 5

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_from_subject.tsv: 5415
df: #rows = 5414, #cols: 5
pKeys: ['biosample_id_namespace', 'biosample_local_id', 'subject_id_namespace', 'subject_local_id']
Going to write the count query
Wrote the count query
*** Entering biosample_from_subject to database ***
df: #rows = 5414, #cols: 5

A slice of df:
  biosample_id_namespace  ... age_at_sampling
0          SPARC.sample:  ...             NaN
1          SPARC.sample:  ...             NaN
2          SPARC.sample:  ...             NaN
3          SPARC.sample:  ...             NaN
4          SPARC.sample:  ...             NaN
5          SPARC.sample:  ...             NaN
6          SPARC.sample:  ...             NaN
7          SPARC.sample:  ...             NaN
8          SPARC.sample:  ...             NaN
9          SPARC.sample:  ...             NaN

[10 rows x 5 columns]
Data inserted successfully!
sql_count_df:    count
0   5414
count:5414
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.2217104434967041 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_describes_collection.tsv ---------
table_name:file_describes_collection
SPARC: file_describes_collection: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_describes_collection.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.04924321174621582 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_race.tsv ---------
table_name:subject_race
SPARC: subject_race: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_race.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.05429697036743164 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_in_collection.tsv ---------
table_name:collection_in_collection
SPARC: collection_in_collection: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_in_collection.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.05003643035888672 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_defined_by_project.tsv ---------
table_name:collection_defined_by_project
SPARC: collection_defined_by_project: Read from file: df: #rows = 260, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_defined_by_project.tsv: 261
df: #rows = 260, #cols: 4
pKeys: ['collection_id_namespace', 'collection_local_id', 'project_id_namespace', 'project_local_id']
Going to write the count query
Wrote the count query
*** Entering collection_defined_by_project to database ***
df: #rows = 260, #cols: 4

A slice of df:
  collection_id_namespace  ... project_local_id
0       SPARC.collection:  ...      OT2OD025342
1       SPARC.collection:  ...      OT2OD023848
2       SPARC.collection:  ...      OT2OD023848
3       SPARC.collection:  ...      OT2OD023848
4       SPARC.collection:  ...      OT2OD023848
5       SPARC.collection:  ...      OT2OD023848
6       SPARC.collection:  ...      OT2OD023848
7       SPARC.collection:  ...      OT2OD023848
8       SPARC.collection:  ...      OT2OD023848
9       SPARC.collection:  ...      OT2OD023848

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:    count
0    260
count:260
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.1072239875793457 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_substance.tsv ---------
table_name:collection_substance
SPARC: collection_substance: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_substance.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.04889798164367676 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_substance.tsv ---------
table_name:biosample_substance
SPARC: biosample_substance: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_substance.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.051650285720825195 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/project.tsv ---------
table_name:project
SPARC: project: Read from file: df: #rows = 46, #cols: 7

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/project.tsv: 47
df: #rows = 46, #cols: 7
pKeys: ['id_namespace', 'local_id']
Going to write the count query
Wrote the count query
*** Entering project to database ***
df: #rows = 46, #cols: 7

A slice of df:
     id_namespace     local_id  ... creation_time       abbreviation
0          SPARC:        SPARC  ...    2017-09-21              SPARC
1  SPARC.project:  OT2OD025342  ...           NaN  SPARC_OT2OD025342
2  SPARC.project:  OT2OD023848  ...           NaN  SPARC_OT2OD023848
3  SPARC.project:  OT2OD025340  ...           NaN  SPARC_OT2OD025340
4  SPARC.project:  OT3OD025349  ...           NaN  SPARC_OT3OD025349
5  SPARC.project:  OT2OD024899  ...           NaN  SPARC_OT2OD024899
6  SPARC.project:  OT2OD023864  ...           NaN  SPARC_OT2OD023864
7  SPARC.project:  OT2OD023847  ...           NaN  SPARC_OT2OD023847
8  SPARC.project:  OT2OD023853  ...           NaN  SPARC_OT2OD023853
9  SPARC.project:  OT2OD023854  ...           NaN  SPARC_OT2OD023854

[10 rows x 5 columns]
Data inserted successfully!
sql_count_df:    count
0     46
count:46
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.11065006256103516 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/anatomy.tsv ---------
table_name:anatomy
SPARC: anatomy: Read from file: df: #rows = 45, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/anatomy.tsv: 46
df: #rows = 45, #cols: 4
pKeys: ['id']
*** Entering anatomy to database ***
df: #rows = 45, #cols: 4

A slice of df:
               id  ... synonyms
0  UBERON:0002298  ...       []
1  UBERON:0000010  ...       []
2  UBERON:0002240  ...       []
3  UBERON:0001013  ...       []
4  UBERON:0002410  ...       []
5  UBERON:0018707  ...       []
6  UBERON:0013702  ...       []
7  UBERON:0002481  ...       []
8  UBERON:0001348  ...       []
9  UBERON:0002008  ...       []

[10 rows x 4 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.10272550582885742 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/assay_type.tsv ---------
table_name:assay_type
SPARC: assay_type: Read from file: df: #rows = 10, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/assay_type.tsv: 11
df: #rows = 10, #cols: 4
pKeys: ['id']
*** Entering assay_type to database ***
df: #rows = 10, #cols: 4

A slice of df:
            id  ... synonyms
0  OBI:0002119  ...       []
1  OBI:0001271  ...       []
2  OBI:0002176  ...       []
3  OBI:0001980  ...       []
4  OBI:0002985  ...       []
5  OBI:0000424  ...       []
6  OBI:0000454  ...       []
7  OBI:0000185  ...       []
8  OBI:0002174  ...       []
9  OBI:0001986  ...       []

[10 rows x 4 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.09687924385070801 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_disease.tsv ---------
table_name:biosample_disease
SPARC: biosample_disease: Read from file: df: #rows = 0, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_disease.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.04895973205566406 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_anatomy.tsv ---------
table_name:collection_anatomy
SPARC: collection_anatomy: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_anatomy.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.054253339767456055 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/gene.tsv ---------
table_name:gene
SPARC: gene: Read from file: df: #rows = 0, #cols: 5

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/gene.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.0501246452331543 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample.tsv ---------
table_name:biosample
SPARC: biosample: Read from file: df: #rows = 5414, #cols: 8

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample.tsv: 5415
df: #rows = 5414, #cols: 8
SPARC: biosample table: changed column name assay_type to sample_prep_method
pKeys: ['id_namespace', 'local_id']
Going to write the count query
Wrote the count query
*** Entering biosample to database ***
df: #rows = 5414, #cols: 8

A slice of df:
    id_namespace  ... persistent_id
0  SPARC.sample:  ...           NaN
1  SPARC.sample:  ...           NaN
2  SPARC.sample:  ...           NaN
3  SPARC.sample:  ...           NaN
4  SPARC.sample:  ...           NaN
5  SPARC.sample:  ...           NaN
6  SPARC.sample:  ...           NaN
7  SPARC.sample:  ...           NaN
8  SPARC.sample:  ...           NaN
9  SPARC.sample:  ...           NaN

[10 rows x 5 columns]
Data inserted successfully!
sql_count_df:    count
0   5414
count:5414
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.24924945831298828 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_describes_subject.tsv ---------
table_name:file_describes_subject
SPARC: file_describes_subject: Read from file: df: #rows = 101283, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_describes_subject.tsv: 101284
df: #rows = 101283, #cols: 4
pKeys: ['file_id_namespace', 'file_local_id', 'subject_id_namespace', 'subject_local_id']
Going to write the count query
Wrote the count query
*** Entering file_describes_subject to database ***
df: #rows = 101283, #cols: 4

A slice of df:
  file_id_namespace  ...                                   subject_local_id
0       SPARC.file:  ...  N:dataset:6f7e029d-684e-4603-9dea-ec82a53c5a75...
1       SPARC.file:  ...  N:dataset:a59a7c4c-0978-4bbe-8d92-93218b5c7b31...
2       SPARC.file:  ...  N:dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555...
3       SPARC.file:  ...  N:dataset:7067a6f5-8df2-4ef8-953a-4d0bfafe6555...
4       SPARC.file:  ...  N:dataset:9472e802-7896-4adf-a34b-1e9af1bf2cbe...
5       SPARC.file:  ...  N:dataset:c46429b9-6db2-40ad-86e5-36ed759a1ee7...
6       SPARC.file:  ...   N:dataset:9dd891fc-6d47-4821-95a0-fc7ff2aeee41_0
7       SPARC.file:  ...  N:dataset:199eb37d-5f1d-4848-98a5-ab105dae48ea...
8       SPARC.file:  ...  N:dataset:e1f838d8-09d4-4648-a977-08d6358a390c...
9       SPARC.file:  ...  N:dataset:834e182d-b52c-4389-ad09-6ec9467f3b55...

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:     count
0  101283
count:101283
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 1.8451766967773438 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject.tsv ---------
table_name:subject
SPARC: subject: Read from file: df: #rows = 3570, #cols: 10

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject.tsv: 3571
df: #rows = 3570, #cols: 10
pKeys: ['id_namespace', 'local_id']
Going to write the count query
Wrote the count query
*** Entering subject to database ***
df: #rows = 3570, #cols: 10

A slice of df:
     id_namespace  ... persistent_id
0  SPARC.subject:  ...           NaN
1  SPARC.subject:  ...           NaN
2  SPARC.subject:  ...           NaN
3  SPARC.subject:  ...           NaN
4  SPARC.subject:  ...           NaN
5  SPARC.subject:  ...           NaN
6  SPARC.subject:  ...           NaN
7  SPARC.subject:  ...           NaN
8  SPARC.subject:  ...           NaN
9  SPARC.subject:  ...           NaN

[10 rows x 5 columns]
Data inserted successfully!
sql_count_df:    count
0   3570
count:3570
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.23463773727416992 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_format.tsv ---------
table_name:file_format
SPARC: file_format: Read from file: df: #rows = 25, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/file_format.tsv: 26
df: #rows = 25, #cols: 4
pKeys: ['id']
*** Entering file_format to database ***
df: #rows = 25, #cols: 4

A slice of df:
            id  ... synonyms
0  format:2333  ...       []
1  format:3990  ...       []
2  format:2572  ...       []
3  format:2332  ...       []
4  format:3987  ...       []
5  format:3547  ...       []
6  format:2330  ...       []
7  format:3751  ...       []
8  format:3507  ...       []
9  format:1930  ...       []

[10 rows x 4 columns]
Data inserted successfully!
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.11127352714538574 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_gene.tsv ---------
table_name:biosample_gene
SPARC: biosample_gene: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/biosample_gene.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.04681563377380371 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/primary_dcc_contact.tsv ---------
table_name:primary_dcc_contact
>>>>>>>> Time taken to ingest the metadata from this file: 5.030632019042969e-05 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_substance.tsv ---------
table_name:subject_substance
SPARC: subject_substance: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_substance.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.04927396774291992 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection.tsv ---------
table_name:collection
SPARC: collection: Read from file: df: #rows = 260, #cols: 8

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection.tsv: 261
df: #rows = 260, #cols: 8
pKeys: ['id_namespace', 'local_id']
Going to write the count query
Wrote the count query
*** Entering collection to database ***
df: #rows = 260, #cols: 8

A slice of df:
        id_namespace  ... abbreviation
0  SPARC.collection:  ...    0khe_2os4
1  SPARC.collection:  ...    0kpx_xh0x
2  SPARC.collection:  ...    0y4e_eskx
3  SPARC.collection:  ...    14qt_e5f0
4  SPARC.collection:  ...    1h3s_thms
5  SPARC.collection:  ...    1uno_tynt
6  SPARC.collection:  ...    1upo_xvkt
7  SPARC.collection:  ...    23je_ute3
8  SPARC.collection:  ...    36ua_upkq
9  SPARC.collection:  ...    3g8i_abjh

[10 rows x 5 columns]
Data inserted successfully!
sql_count_df:    count
0    260
count:260
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.11968779563903809 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/compound.tsv ---------
table_name:compound
SPARC: compound: Read from file: df: #rows = 0, #cols: 4

Processing C2M2 Files...: 100%|██████████| 1/1 [00:22<00:00, 22.34s/it]Processing C2M2 Files...: 100%|██████████| 1/1 [00:22<00:00, 22.34s/it]
#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/compound.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.05110001564025879 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_in_collection.tsv ---------
table_name:subject_in_collection
SPARC: subject_in_collection: Read from file: df: #rows = 3570, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/subject_in_collection.tsv: 3571
df: #rows = 3570, #cols: 4
pKeys: ['subject_id_namespace', 'subject_local_id', 'collection_id_namespace', 'collection_local_id']
Going to write the count query
Wrote the count query
*** Entering subject_in_collection to database ***
df: #rows = 3570, #cols: 4

A slice of df:
  subject_id_namespace  ...                             collection_local_id
0       SPARC.subject:  ...  N:dataset:36b1a054-d05c-46ea-ade1-84cfe2a15a6c
1       SPARC.subject:  ...  N:dataset:36b1a054-d05c-46ea-ade1-84cfe2a15a6c
2       SPARC.subject:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
3       SPARC.subject:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
4       SPARC.subject:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
5       SPARC.subject:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
6       SPARC.subject:  ...  N:dataset:e70a0529-3f7d-41dd-beee-26d024540f2f
7       SPARC.subject:  ...  N:dataset:80a485bf-0d9d-425d-9f51-94b59f842ede
8       SPARC.subject:  ...  N:dataset:80a485bf-0d9d-425d-9f51-94b59f842ede
9       SPARC.subject:  ...  N:dataset:80a485bf-0d9d-425d-9f51-94b59f842ede

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:    count
0   3570
count:3570
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.19800329208374023 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/project_in_project.tsv ---------
table_name:project_in_project
SPARC: project_in_project: Read from file: df: #rows = 45, #cols: 4

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/project_in_project.tsv: 46
df: #rows = 45, #cols: 4
pKeys: ['parent_project_id_namespace', 'parent_project_local_id', 'child_project_id_namespace', 'child_project_local_id']
Going to write the count query
Wrote the count query
*** Entering project_in_project to database ***
df: #rows = 45, #cols: 4

A slice of df:
  parent_project_id_namespace  ... child_project_local_id
0                      SPARC:  ...            OT2OD025342
1                      SPARC:  ...            OT2OD023848
2                      SPARC:  ...            OT2OD025340
3                      SPARC:  ...            OT3OD025349
4                      SPARC:  ...            OT2OD024899
5                      SPARC:  ...            OT2OD023864
6                      SPARC:  ...            OT2OD023847
7                      SPARC:  ...            OT2OD023853
8                      SPARC:  ...            OT2OD023854
9                      SPARC:  ...           OT2OD0204899

[10 rows x 4 columns]
Data inserted successfully!
sql_count_df:    count
0     45
count:45
>>> All good.
>>>>>>>> Time taken to ingest the metadata from this file: 0.13019847869873047 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_taxonomy.tsv ---------
table_name:collection_taxonomy
SPARC: collection_taxonomy: Read from file: df: #rows = 0, #cols: 3

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/collection_taxonomy.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.06082034111022949 seconds.

--------- ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/substance.tsv ---------
table_name:substance
SPARC: substance: Read from file: df: #rows = 0, #cols: 5

#Lines in file ingest/c2m2s/SPARC/c2m2_2024JUN15_submit/c2m2_2024JUN15_submit/substance.tsv: 1
>>>>>>>> Time taken to ingest the metadata from this file: 0.051291465759277344 seconds.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Time taken to ingest the metadata from the files: 22.360177755355835 seconds.

 ----------- Adding foreign key constraint for table file ----------
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_id_namespace_1;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_id_namespace_1 FOREIGN KEY (id_namespace) REFERENCES sparc.id_namespace (id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_project_2;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_project_2 FOREIGN KEY (project_id_namespace, project_local_id) REFERENCES sparc.project (id_namespace, local_id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_file_format_3;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_file_format_3 FOREIGN KEY (file_format) REFERENCES sparc.file_format (id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_file_format_4;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_file_format_4 FOREIGN KEY (compression_format) REFERENCES sparc.file_format (id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_data_type_5;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_data_type_5 FOREIGN KEY (data_type) REFERENCES sparc.data_type (id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_assay_type_6;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_assay_type_6 FOREIGN KEY (assay_type) REFERENCES sparc.assay_type (id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_analysis_type_7;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_analysis_type_7 FOREIGN KEY (analysis_type) REFERENCES sparc.analysis_type (id);
ALTER TABLE sparc.file DROP CONSTRAINT IF EXISTS fk_file_collection_8;
ALTER TABLE sparc.file ADD CONSTRAINT  fk_file_collection_8 FOREIGN KEY (bundle_collection_id_namespace, bundle_collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
 ----------- Adding foreign key constraint for table biosample ----------
ALTER TABLE sparc.biosample DROP CONSTRAINT IF EXISTS fk_biosample_id_namespace_1;
ALTER TABLE sparc.biosample ADD CONSTRAINT  fk_biosample_id_namespace_1 FOREIGN KEY (id_namespace) REFERENCES sparc.id_namespace (id);
ALTER TABLE sparc.biosample DROP CONSTRAINT IF EXISTS fk_biosample_project_2;
ALTER TABLE sparc.biosample ADD CONSTRAINT  fk_biosample_project_2 FOREIGN KEY (project_id_namespace, project_local_id) REFERENCES sparc.project (id_namespace, local_id);
ALTER TABLE sparc.biosample DROP CONSTRAINT IF EXISTS fk_biosample_sample_prep_method_3;
ALTER TABLE sparc.biosample ADD CONSTRAINT  fk_biosample_sample_prep_method_3 FOREIGN KEY (sample_prep_method) REFERENCES sparc.sample_prep_method (id);
ALTER TABLE sparc.biosample DROP CONSTRAINT IF EXISTS fk_biosample_anatomy_4;
ALTER TABLE sparc.biosample ADD CONSTRAINT  fk_biosample_anatomy_4 FOREIGN KEY (anatomy) REFERENCES sparc.anatomy (id);
 ----------- Adding foreign key constraint for table subject ----------
ALTER TABLE sparc.subject DROP CONSTRAINT IF EXISTS fk_subject_id_namespace_1;
ALTER TABLE sparc.subject ADD CONSTRAINT  fk_subject_id_namespace_1 FOREIGN KEY (id_namespace) REFERENCES sparc.id_namespace (id);
ALTER TABLE sparc.subject DROP CONSTRAINT IF EXISTS fk_subject_project_2;
ALTER TABLE sparc.subject ADD CONSTRAINT  fk_subject_project_2 FOREIGN KEY (project_id_namespace, project_local_id) REFERENCES sparc.project (id_namespace, local_id);
 ----------- Adding foreign key constraint for table dcc ----------
ALTER TABLE sparc.dcc DROP CONSTRAINT IF EXISTS fk_dcc_project_1;
ALTER TABLE sparc.dcc ADD CONSTRAINT  fk_dcc_project_1 FOREIGN KEY (project_id_namespace, project_local_id) REFERENCES sparc.project (id_namespace, local_id);
 ----------- Adding foreign key constraint for table project ----------
ALTER TABLE sparc.project DROP CONSTRAINT IF EXISTS fk_project_id_namespace_1;
ALTER TABLE sparc.project ADD CONSTRAINT  fk_project_id_namespace_1 FOREIGN KEY (id_namespace) REFERENCES sparc.id_namespace (id);
 ----------- Adding foreign key constraint for table project_in_project ----------
ALTER TABLE sparc.project_in_project DROP CONSTRAINT IF EXISTS fk_project_in_project_project_1;
ALTER TABLE sparc.project_in_project ADD CONSTRAINT  fk_project_in_project_project_1 FOREIGN KEY (parent_project_id_namespace, parent_project_local_id) REFERENCES sparc.project (id_namespace, local_id);
ALTER TABLE sparc.project_in_project DROP CONSTRAINT IF EXISTS fk_project_in_project_project_2;
ALTER TABLE sparc.project_in_project ADD CONSTRAINT  fk_project_in_project_project_2 FOREIGN KEY (child_project_id_namespace, child_project_local_id) REFERENCES sparc.project (id_namespace, local_id);
 ----------- Adding foreign key constraint for table collection ----------
ALTER TABLE sparc.collection DROP CONSTRAINT IF EXISTS fk_collection_id_namespace_1;
ALTER TABLE sparc.collection ADD CONSTRAINT  fk_collection_id_namespace_1 FOREIGN KEY (id_namespace) REFERENCES sparc.id_namespace (id);
 ----------- Adding foreign key constraint for table collection_in_collection ----------
ALTER TABLE sparc.collection_in_collection DROP CONSTRAINT IF EXISTS fk_collection_in_collection_collection_1;
ALTER TABLE sparc.collection_in_collection ADD CONSTRAINT  fk_collection_in_collection_collection_1 FOREIGN KEY (superset_collection_id_namespace, superset_collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_in_collection DROP CONSTRAINT IF EXISTS fk_collection_in_collection_collection_2;
ALTER TABLE sparc.collection_in_collection ADD CONSTRAINT  fk_collection_in_collection_collection_2 FOREIGN KEY (subset_collection_id_namespace, subset_collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
 ----------- Adding foreign key constraint for table file_describes_collection ----------
ALTER TABLE sparc.file_describes_collection DROP CONSTRAINT IF EXISTS fk_file_describes_collection_file_1;
ALTER TABLE sparc.file_describes_collection ADD CONSTRAINT  fk_file_describes_collection_file_1 FOREIGN KEY (file_id_namespace, file_local_id) REFERENCES sparc.file (id_namespace, local_id);
ALTER TABLE sparc.file_describes_collection DROP CONSTRAINT IF EXISTS fk_file_describes_collection_collection_2;
ALTER TABLE sparc.file_describes_collection ADD CONSTRAINT  fk_file_describes_collection_collection_2 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
 ----------- Adding foreign key constraint for table collection_defined_by_project ----------
ALTER TABLE sparc.collection_defined_by_project DROP CONSTRAINT IF EXISTS fk_collection_defined_by_project_collection_1;
ALTER TABLE sparc.collection_defined_by_project ADD CONSTRAINT  fk_collection_defined_by_project_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_defined_by_project DROP CONSTRAINT IF EXISTS fk_collection_defined_by_project_project_2;
ALTER TABLE sparc.collection_defined_by_project ADD CONSTRAINT  fk_collection_defined_by_project_project_2 FOREIGN KEY (project_id_namespace, project_local_id) REFERENCES sparc.project (id_namespace, local_id);
 ----------- Adding foreign key constraint for table file_in_collection ----------
ALTER TABLE sparc.file_in_collection DROP CONSTRAINT IF EXISTS fk_file_in_collection_file_1;
ALTER TABLE sparc.file_in_collection ADD CONSTRAINT  fk_file_in_collection_file_1 FOREIGN KEY (file_id_namespace, file_local_id) REFERENCES sparc.file (id_namespace, local_id);
ALTER TABLE sparc.file_in_collection DROP CONSTRAINT IF EXISTS fk_file_in_collection_collection_2;
ALTER TABLE sparc.file_in_collection ADD CONSTRAINT  fk_file_in_collection_collection_2 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
 ----------- Adding foreign key constraint for table biosample_in_collection ----------
ALTER TABLE sparc.biosample_in_collection DROP CONSTRAINT IF EXISTS fk_biosample_in_collection_biosample_1;
ALTER TABLE sparc.biosample_in_collection ADD CONSTRAINT  fk_biosample_in_collection_biosample_1 FOREIGN KEY (biosample_id_namespace, biosample_local_id) REFERENCES sparc.biosample (id_namespace, local_id);
ALTER TABLE sparc.biosample_in_collection DROP CONSTRAINT IF EXISTS fk_biosample_in_collection_collection_2;
ALTER TABLE sparc.biosample_in_collection ADD CONSTRAINT  fk_biosample_in_collection_collection_2 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
 ----------- Adding foreign key constraint for table subject_in_collection ----------
ALTER TABLE sparc.subject_in_collection DROP CONSTRAINT IF EXISTS fk_subject_in_collection_subject_1;
ALTER TABLE sparc.subject_in_collection ADD CONSTRAINT  fk_subject_in_collection_subject_1 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
ALTER TABLE sparc.subject_in_collection DROP CONSTRAINT IF EXISTS fk_subject_in_collection_collection_2;
ALTER TABLE sparc.subject_in_collection ADD CONSTRAINT  fk_subject_in_collection_collection_2 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
 ----------- Adding foreign key constraint for table file_describes_biosample ----------
ALTER TABLE sparc.file_describes_biosample DROP CONSTRAINT IF EXISTS fk_file_describes_biosample_file_1;
ALTER TABLE sparc.file_describes_biosample ADD CONSTRAINT  fk_file_describes_biosample_file_1 FOREIGN KEY (file_id_namespace, file_local_id) REFERENCES sparc.file (id_namespace, local_id);
ALTER TABLE sparc.file_describes_biosample DROP CONSTRAINT IF EXISTS fk_file_describes_biosample_biosample_2;
ALTER TABLE sparc.file_describes_biosample ADD CONSTRAINT  fk_file_describes_biosample_biosample_2 FOREIGN KEY (biosample_id_namespace, biosample_local_id) REFERENCES sparc.biosample (id_namespace, local_id);
 ----------- Adding foreign key constraint for table file_describes_subject ----------
ALTER TABLE sparc.file_describes_subject DROP CONSTRAINT IF EXISTS fk_file_describes_subject_file_1;
ALTER TABLE sparc.file_describes_subject ADD CONSTRAINT  fk_file_describes_subject_file_1 FOREIGN KEY (file_id_namespace, file_local_id) REFERENCES sparc.file (id_namespace, local_id);
ALTER TABLE sparc.file_describes_subject DROP CONSTRAINT IF EXISTS fk_file_describes_subject_subject_2;
ALTER TABLE sparc.file_describes_subject ADD CONSTRAINT  fk_file_describes_subject_subject_2 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
 ----------- Adding foreign key constraint for table biosample_from_subject ----------
ALTER TABLE sparc.biosample_from_subject DROP CONSTRAINT IF EXISTS fk_biosample_from_subject_biosample_1;
ALTER TABLE sparc.biosample_from_subject ADD CONSTRAINT  fk_biosample_from_subject_biosample_1 FOREIGN KEY (biosample_id_namespace, biosample_local_id) REFERENCES sparc.biosample (id_namespace, local_id);
ALTER TABLE sparc.biosample_from_subject DROP CONSTRAINT IF EXISTS fk_biosample_from_subject_subject_2;
ALTER TABLE sparc.biosample_from_subject ADD CONSTRAINT  fk_biosample_from_subject_subject_2 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
 ----------- Adding foreign key constraint for table biosample_disease ----------
ALTER TABLE sparc.biosample_disease DROP CONSTRAINT IF EXISTS fk_biosample_disease_biosample_1;
ALTER TABLE sparc.biosample_disease ADD CONSTRAINT  fk_biosample_disease_biosample_1 FOREIGN KEY (biosample_id_namespace, biosample_local_id) REFERENCES sparc.biosample (id_namespace, local_id);
ALTER TABLE sparc.biosample_disease DROP CONSTRAINT IF EXISTS fk_biosample_disease_disease_2;
ALTER TABLE sparc.biosample_disease ADD CONSTRAINT  fk_biosample_disease_disease_2 FOREIGN KEY (disease) REFERENCES sparc.disease (id);
 ----------- Adding foreign key constraint for table subject_disease ----------
ALTER TABLE sparc.subject_disease DROP CONSTRAINT IF EXISTS fk_subject_disease_subject_1;
ALTER TABLE sparc.subject_disease ADD CONSTRAINT  fk_subject_disease_subject_1 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
ALTER TABLE sparc.subject_disease DROP CONSTRAINT IF EXISTS fk_subject_disease_disease_2;
ALTER TABLE sparc.subject_disease ADD CONSTRAINT  fk_subject_disease_disease_2 FOREIGN KEY (disease) REFERENCES sparc.disease (id);
 ----------- Adding foreign key constraint for table collection_disease ----------
ALTER TABLE sparc.collection_disease DROP CONSTRAINT IF EXISTS fk_collection_disease_collection_1;
ALTER TABLE sparc.collection_disease ADD CONSTRAINT  fk_collection_disease_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_disease DROP CONSTRAINT IF EXISTS fk_collection_disease_disease_2;
ALTER TABLE sparc.collection_disease ADD CONSTRAINT  fk_collection_disease_disease_2 FOREIGN KEY (disease) REFERENCES sparc.disease (id);
 ----------- Adding foreign key constraint for table collection_phenotype ----------
ALTER TABLE sparc.collection_phenotype DROP CONSTRAINT IF EXISTS fk_collection_phenotype_collection_1;
ALTER TABLE sparc.collection_phenotype ADD CONSTRAINT  fk_collection_phenotype_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_phenotype DROP CONSTRAINT IF EXISTS fk_collection_phenotype_phenotype_2;
ALTER TABLE sparc.collection_phenotype ADD CONSTRAINT  fk_collection_phenotype_phenotype_2 FOREIGN KEY (phenotype) REFERENCES sparc.phenotype (id);
 ----------- Adding foreign key constraint for table collection_gene ----------
ALTER TABLE sparc.collection_gene DROP CONSTRAINT IF EXISTS fk_collection_gene_collection_1;
ALTER TABLE sparc.collection_gene ADD CONSTRAINT  fk_collection_gene_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_gene DROP CONSTRAINT IF EXISTS fk_collection_gene_gene_2;
ALTER TABLE sparc.collection_gene ADD CONSTRAINT  fk_collection_gene_gene_2 FOREIGN KEY (gene) REFERENCES sparc.gene (id);
 ----------- Adding foreign key constraint for table collection_compound ----------
ALTER TABLE sparc.collection_compound DROP CONSTRAINT IF EXISTS fk_collection_compound_collection_1;
ALTER TABLE sparc.collection_compound ADD CONSTRAINT  fk_collection_compound_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_compound DROP CONSTRAINT IF EXISTS fk_collection_compound_compound_2;
ALTER TABLE sparc.collection_compound ADD CONSTRAINT  fk_collection_compound_compound_2 FOREIGN KEY (compound) REFERENCES sparc.compound (id);
 ----------- Adding foreign key constraint for table collection_substance ----------
ALTER TABLE sparc.collection_substance DROP CONSTRAINT IF EXISTS fk_collection_substance_collection_1;
ALTER TABLE sparc.collection_substance ADD CONSTRAINT  fk_collection_substance_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_substance DROP CONSTRAINT IF EXISTS fk_collection_substance_substance_2;
ALTER TABLE sparc.collection_substance ADD CONSTRAINT  fk_collection_substance_substance_2 FOREIGN KEY (substance) REFERENCES sparc.substance (id);
 ----------- Adding foreign key constraint for table collection_taxonomy ----------
ALTER TABLE sparc.collection_taxonomy DROP CONSTRAINT IF EXISTS fk_collection_taxonomy_collection_1;
ALTER TABLE sparc.collection_taxonomy ADD CONSTRAINT  fk_collection_taxonomy_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_taxonomy DROP CONSTRAINT IF EXISTS fk_collection_taxonomy_ncbi_taxonomy_2;
ALTER TABLE sparc.collection_taxonomy ADD CONSTRAINT  fk_collection_taxonomy_ncbi_taxonomy_2 FOREIGN KEY (taxon) REFERENCES sparc.ncbi_taxonomy (id);
 ----------- Adding foreign key constraint for table collection_anatomy ----------
ALTER TABLE sparc.collection_anatomy DROP CONSTRAINT IF EXISTS fk_collection_anatomy_collection_1;
ALTER TABLE sparc.collection_anatomy ADD CONSTRAINT  fk_collection_anatomy_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_anatomy DROP CONSTRAINT IF EXISTS fk_collection_anatomy_anatomy_2;
ALTER TABLE sparc.collection_anatomy ADD CONSTRAINT  fk_collection_anatomy_anatomy_2 FOREIGN KEY (anatomy) REFERENCES sparc.anatomy (id);
 ----------- Adding foreign key constraint for table collection_protein ----------
ALTER TABLE sparc.collection_protein DROP CONSTRAINT IF EXISTS fk_collection_protein_collection_1;
ALTER TABLE sparc.collection_protein ADD CONSTRAINT  fk_collection_protein_collection_1 FOREIGN KEY (collection_id_namespace, collection_local_id) REFERENCES sparc.collection (id_namespace, local_id);
ALTER TABLE sparc.collection_protein DROP CONSTRAINT IF EXISTS fk_collection_protein_protein_2;
ALTER TABLE sparc.collection_protein ADD CONSTRAINT  fk_collection_protein_protein_2 FOREIGN KEY (protein) REFERENCES sparc.protein (id);
 ----------- Adding foreign key constraint for table subject_phenotype ----------
ALTER TABLE sparc.subject_phenotype DROP CONSTRAINT IF EXISTS fk_subject_phenotype_subject_1;
ALTER TABLE sparc.subject_phenotype ADD CONSTRAINT  fk_subject_phenotype_subject_1 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
ALTER TABLE sparc.subject_phenotype DROP CONSTRAINT IF EXISTS fk_subject_phenotype_phenotype_2;
ALTER TABLE sparc.subject_phenotype ADD CONSTRAINT  fk_subject_phenotype_phenotype_2 FOREIGN KEY (phenotype) REFERENCES sparc.phenotype (id);
 ----------- Adding foreign key constraint for table biosample_substance ----------
ALTER TABLE sparc.biosample_substance DROP CONSTRAINT IF EXISTS fk_biosample_substance_biosample_1;
ALTER TABLE sparc.biosample_substance ADD CONSTRAINT  fk_biosample_substance_biosample_1 FOREIGN KEY (biosample_id_namespace, biosample_local_id) REFERENCES sparc.biosample (id_namespace, local_id);
ALTER TABLE sparc.biosample_substance DROP CONSTRAINT IF EXISTS fk_biosample_substance_substance_2;
ALTER TABLE sparc.biosample_substance ADD CONSTRAINT  fk_biosample_substance_substance_2 FOREIGN KEY (substance) REFERENCES sparc.substance (id);
 ----------- Adding foreign key constraint for table subject_substance ----------
ALTER TABLE sparc.subject_substance DROP CONSTRAINT IF EXISTS fk_subject_substance_subject_1;
ALTER TABLE sparc.subject_substance ADD CONSTRAINT  fk_subject_substance_subject_1 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
ALTER TABLE sparc.subject_substance DROP CONSTRAINT IF EXISTS fk_subject_substance_substance_2;
ALTER TABLE sparc.subject_substance ADD CONSTRAINT  fk_subject_substance_substance_2 FOREIGN KEY (substance) REFERENCES sparc.substance (id);
 ----------- Adding foreign key constraint for table biosample_gene ----------
ALTER TABLE sparc.biosample_gene DROP CONSTRAINT IF EXISTS fk_biosample_gene_biosample_1;
ALTER TABLE sparc.biosample_gene ADD CONSTRAINT  fk_biosample_gene_biosample_1 FOREIGN KEY (biosample_id_namespace, biosample_local_id) REFERENCES sparc.biosample (id_namespace, local_id);
ALTER TABLE sparc.biosample_gene DROP CONSTRAINT IF EXISTS fk_biosample_gene_gene_2;
ALTER TABLE sparc.biosample_gene ADD CONSTRAINT  fk_biosample_gene_gene_2 FOREIGN KEY (gene) REFERENCES sparc.gene (id);
 ----------- Adding foreign key constraint for table phenotype_gene ----------
ALTER TABLE sparc.phenotype_gene DROP CONSTRAINT IF EXISTS fk_phenotype_gene_phenotype_1;
ALTER TABLE sparc.phenotype_gene ADD CONSTRAINT  fk_phenotype_gene_phenotype_1 FOREIGN KEY (phenotype) REFERENCES sparc.phenotype (id);
ALTER TABLE sparc.phenotype_gene DROP CONSTRAINT IF EXISTS fk_phenotype_gene_gene_2;
ALTER TABLE sparc.phenotype_gene ADD CONSTRAINT  fk_phenotype_gene_gene_2 FOREIGN KEY (gene) REFERENCES sparc.gene (id);
 ----------- Adding foreign key constraint for table phenotype_disease ----------
ALTER TABLE sparc.phenotype_disease DROP CONSTRAINT IF EXISTS fk_phenotype_disease_phenotype_1;
ALTER TABLE sparc.phenotype_disease ADD CONSTRAINT  fk_phenotype_disease_phenotype_1 FOREIGN KEY (phenotype) REFERENCES sparc.phenotype (id);
ALTER TABLE sparc.phenotype_disease DROP CONSTRAINT IF EXISTS fk_phenotype_disease_disease_2;
ALTER TABLE sparc.phenotype_disease ADD CONSTRAINT  fk_phenotype_disease_disease_2 FOREIGN KEY (disease) REFERENCES sparc.disease (id);
 ----------- Adding foreign key constraint for table subject_race ----------
ALTER TABLE sparc.subject_race DROP CONSTRAINT IF EXISTS fk_subject_race_subject_1;
ALTER TABLE sparc.subject_race ADD CONSTRAINT  fk_subject_race_subject_1 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
 ----------- Adding foreign key constraint for table subject_role_taxonomy ----------
ALTER TABLE sparc.subject_role_taxonomy DROP CONSTRAINT IF EXISTS fk_subject_role_taxonomy_subject_1;
ALTER TABLE sparc.subject_role_taxonomy ADD CONSTRAINT  fk_subject_role_taxonomy_subject_1 FOREIGN KEY (subject_id_namespace, subject_local_id) REFERENCES sparc.subject (id_namespace, local_id);
ALTER TABLE sparc.subject_role_taxonomy DROP CONSTRAINT IF EXISTS fk_subject_role_taxonomy_ncbi_taxonomy_2;
ALTER TABLE sparc.subject_role_taxonomy ADD CONSTRAINT  fk_subject_role_taxonomy_ncbi_taxonomy_2 FOREIGN KEY (taxonomy_id) REFERENCES sparc.ncbi_taxonomy (id);
 ----------- Adding foreign key constraint for table assay_type ----------
 ----------- Adding foreign key constraint for table analysis_type ----------
 ----------- Adding foreign key constraint for table ncbi_taxonomy ----------
 ----------- Adding foreign key constraint for table anatomy ----------
 ----------- Adding foreign key constraint for table file_format ----------
 ----------- Adding foreign key constraint for table data_type ----------
 ----------- Adding foreign key constraint for table disease ----------
 ----------- Adding foreign key constraint for table phenotype ----------
 ----------- Adding foreign key constraint for table compound ----------
 ----------- Adding foreign key constraint for table substance ----------
ALTER TABLE sparc.substance DROP CONSTRAINT IF EXISTS fk_substance_compound_1;
ALTER TABLE sparc.substance ADD CONSTRAINT  fk_substance_compound_1 FOREIGN KEY (compound) REFERENCES sparc.compound (id);
 ----------- Adding foreign key constraint for table gene ----------
ALTER TABLE sparc.gene DROP CONSTRAINT IF EXISTS fk_gene_ncbi_taxonomy_1;
ALTER TABLE sparc.gene ADD CONSTRAINT  fk_gene_ncbi_taxonomy_1 FOREIGN KEY (organism) REFERENCES sparc.ncbi_taxonomy (id);
 ----------- Adding foreign key constraint for table protein ----------
ALTER TABLE sparc.protein DROP CONSTRAINT IF EXISTS fk_protein_ncbi_taxonomy_1;
ALTER TABLE sparc.protein ADD CONSTRAINT  fk_protein_ncbi_taxonomy_1 FOREIGN KEY (organism) REFERENCES sparc.ncbi_taxonomy (id);
 ----------- Adding foreign key constraint for table protein_gene ----------
ALTER TABLE sparc.protein_gene DROP CONSTRAINT IF EXISTS fk_protein_gene_protein_1;
ALTER TABLE sparc.protein_gene ADD CONSTRAINT  fk_protein_gene_protein_1 FOREIGN KEY (protein) REFERENCES sparc.protein (id);
ALTER TABLE sparc.protein_gene DROP CONSTRAINT IF EXISTS fk_protein_gene_gene_2;
ALTER TABLE sparc.protein_gene ADD CONSTRAINT  fk_protein_gene_gene_2 FOREIGN KEY (gene) REFERENCES sparc.gene (id);
 ----------- Adding foreign key constraint for table sample_prep_method ----------
 ----------- Adding foreign key constraint for table id_namespace ----------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Time taken to add foreign constraints: 3.3516693115234375 seconds.


>>>>>>>> Attempting removal of .0 from columns size_in_bytes and uncompressed_size_in_bytes of table sparc.file successful.

Update successful.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Total time taken: 30.722426652908325 seconds.

********** C2M2 metadata ingestion completed: schema_name: sparc.
