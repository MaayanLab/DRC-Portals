generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  dcc           String?
  role          Role         @default(USER)
  Account       Account[]
  Session       Session[]
  DCCToUser     DCCToUser[]
  dcc_assets    dcc_assets[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DCCToUser {
  A    String
  B    String
  dccs dccs   @relation(fields: [A], references: [id], onDelete: Cascade)
  User User   @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_DCCToUser_AB_unique")
  @@index([B], map: "_DCCToUser_B_index")
  @@map("_DCCToUser")
}

model c2m2_datapackage {
  id             String           @id @db.Uuid
  dcc_asset_link String           @unique
  dcc_assets     dcc_assets       @relation(fields: [dcc_asset_link], references: [link], onDelete: Cascade)
  c2m2_file_node c2m2_file_node[]
}

model c2m2_file_node {
  id                  String           @id @db.Uuid
  c2m2_datapackage_id String           @db.Uuid
  creation_time       DateTime?        @db.Timestamptz(6)
  persistent_id       String?
  size_in_bytes       BigInt?
  file_format         String?
  data_type           String?
  assay_type          String?
  access_url          String?
  md5                 String?
  mime_type           String?
  sha256              String?
  c2m2_datapackage    c2m2_datapackage @relation(fields: [c2m2_datapackage_id], references: [id], onDelete: Cascade)
  node                node             @relation(fields: [id], references: [id])
}

model center_outreach {
  outreach_id String   @id
  center_id   String
  centers     centers  @relation(fields: [center_id], references: [id])
  outreach    outreach @relation(fields: [outreach_id], references: [id])
}

model center_publications {
  publication_id String
  center_id      String
  centers        centers      @relation(fields: [center_id], references: [id])
  publications   publications @relation(fields: [publication_id], references: [id])

  @@id([publication_id, center_id])
}

model centers {
  id                      String                @id
  label                   String
  short_label             String?
  short_description       String?
  description             String?
  homepage                String?
  icon                    String?
  grant_num               String?
  active                  Boolean               @default(true)
  institution             Json?
  press_release           Json?
  project_title           String                @default("")
  video_tutorial          String?
  principal_investigators Json?
  center_outreach         center_outreach[]
  center_publications     center_publications[]
}

model code_assets {
  type              String
  name              String
  link              String     @unique
  description       String?
  openAPISpec       Boolean?
  smartAPISpec      Boolean?
  smartAPIURL       String?
  entityPageExample String?
  dcc_assets        dcc_assets @relation(fields: [link], references: [link])

  @@id([type, link])
  @@unique([type, link])
}

model dcc_asset_node {
  id         String     @id @db.Uuid
  link       String     @unique
  node       node       @relation(fields: [id], references: [id])
  dcc_assets dcc_assets @relation(fields: [link], references: [link])
}

model dcc_assets {
  link                  String                 @unique
  lastmodified          DateTime               @default(now())
  current               Boolean                @default(true)
  creator               String?
  dcc_id                String
  drcapproved           Boolean                @default(false)
  dccapproved           Boolean                @default(false)
  deleted               Boolean                @default(false)
  created               DateTime               @default(now())
  c2m2_datapackage      c2m2_datapackage?
  code_assets           code_assets?
  dcc_asset_node        dcc_asset_node?
  User                  User?                  @relation(fields: [creator], references: [email])
  dccs                  dccs                   @relation(fields: [dcc_id], references: [id])
  fair_assessments      fair_assessments[]
  file_assets           file_assets?
  gene_set_library_node gene_set_library_node?

  @@id([dcc_id, link, lastmodified])
  @@unique([dcc_id, link, lastmodified])
}

model dcc_outreach {
  outreach_id String
  dcc_id      String
  dccs        dccs     @relation(fields: [dcc_id], references: [id])
  outreach    outreach @relation(fields: [outreach_id], references: [id])

  @@id([outreach_id, dcc_id])
}

model dcc_partnerships {
  partnership_id String
  dcc_id         String
  lead           Boolean?     @default(false)
  dccs           dccs         @relation(fields: [dcc_id], references: [id])
  partnerships   partnerships @relation(fields: [partnership_id], references: [id])

  @@id([partnership_id, dcc_id])
}

model dcc_publications {
  dcc_id         String
  publication_id String
  dccs           dccs         @relation(fields: [dcc_id], references: [id])
  publications   publications @relation(fields: [publication_id], references: [id])

  @@id([publication_id, dcc_id])
}

model dcc_usecase {
  usecase_id String
  dcc_id     String
  dccs       dccs    @relation(fields: [dcc_id], references: [id])
  usecase    usecase @relation(fields: [usecase_id], references: [id])

  @@id([usecase_id, dcc_id])
}

model dccs {
  id               String             @id
  label            String
  description      String?
  homepage         String
  icon             String?
  annotation       Json?
  short_label      String?
  cfde_partner     Boolean            @default(false)
  cf_site          String?
  active           Boolean            @default(true)
  DCCToUser        DCCToUser[]
  dcc_assets       dcc_assets[]
  dcc_outreach     dcc_outreach[]
  dcc_partnerships dcc_partnerships[]
  dcc_publications dcc_publications[]
  dcc_usecase      dcc_usecase[]
  fair_assessments fair_assessments[]
  kg_assertion     kg_assertion[]
  node             node[]
  usecase          usecase[]
}

model entity_node {
  id                                               String         @id @db.Uuid
  type                                             String
  node                                             node           @relation(fields: [id], references: [id])
  gene_entity                                      gene_entity?
  kg_assertion_kg_assertion_source_idToentity_node kg_assertion[] @relation("kg_assertion_source_idToentity_node")
  kg_assertion_kg_assertion_target_idToentity_node kg_assertion[] @relation("kg_assertion_target_idToentity_node")

  @@index([type])
}

model fair_assessments {
  id         String     @id
  dcc_id     String
  type       String
  link       String
  rubric     Json
  timestamp  DateTime   @default(now())
  log        String?
  dccs       dccs       @relation(fields: [dcc_id], references: [id], onDelete: Cascade)
  dcc_assets dcc_assets @relation(fields: [link], references: [link], onDelete: Cascade)

  @@unique([link, timestamp])
}

model file_assets {
  filetype       String
  filename       String
  link           String     @unique
  size           BigInt?
  sha256checksum String?
  dcc_assets     dcc_assets @relation(fields: [link], references: [link])

  @@id([filetype, link])
  @@unique([filetype, link])
}

model gene_entity {
  id                    String                  @id @db.Uuid
  entrez                String
  ensembl               String
  entity_node           entity_node             @relation(fields: [id], references: [id])
  gene_set_library_node gene_set_library_node[] @relation("GeneEntityToGeneSetLibraryNode")
  gene_set_node         gene_set_node[]         @relation("GeneEntityToGeneSetNode")
}

model gene_set_library_node {
  id             String          @id @db.Uuid
  dcc_asset_link String          @unique
  dcc_assets     dcc_assets      @relation(fields: [dcc_asset_link], references: [link], onDelete: Cascade)
  node           node            @relation(fields: [id], references: [id])
  gene_set_node  gene_set_node[]
  gene_entity    gene_entity[]   @relation("GeneEntityToGeneSetLibraryNode")
}

model gene_set_node {
  id                    String                @id @db.Uuid
  gene_set_library_id   String                @db.Uuid
  gene_set_library_node gene_set_library_node @relation(fields: [gene_set_library_id], references: [id])
  node                  node                  @relation(fields: [id], references: [id])
  gene_entity           gene_entity[]         @relation("GeneEntityToGeneSetNode")
}

model kg_assertion {
  id                                              String           @id @db.Uuid
  relation_id                                     String           @db.Uuid
  source_id                                       String           @db.Uuid
  target_id                                       String           @db.Uuid
  dcc_id                                          String?
  SAB                                             String
  evidence                                        Json?
  dccs                                            dccs?            @relation(fields: [dcc_id], references: [id])
  kg_relation_node                                kg_relation_node @relation(fields: [relation_id], references: [id])
  entity_node_kg_assertion_source_idToentity_node entity_node      @relation("kg_assertion_source_idToentity_node", fields: [source_id], references: [id])
  entity_node_kg_assertion_target_idToentity_node entity_node      @relation("kg_assertion_target_idToentity_node", fields: [target_id], references: [id])
}

model kg_relation_node {
  id           String         @id @db.Uuid
  kg_assertion kg_assertion[]
  node         node           @relation(fields: [id], references: [id])
}

model kvstore {
  key   String @id
  value Json
}

model news {
  id               String   @id
  date             DateTime
  portal           String
  version          String?
  title            String
  description      String?
  img              String?
  link             String?
  prod             Boolean
  tags             Json?
  supp_description Json?
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model node {
  dcc_id                String?
  id                    String                   @id @db.Uuid
  type                  NodeType
  label                 String
  description           String
  searchable            Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, ((label || ' '::text) || description))"))
  entity_type           String                   @default("")
  pagerank              Float                    @default(0)
  slug                  String
  c2m2_file_node        c2m2_file_node?
  dcc_asset_node        dcc_asset_node?
  entity_node           entity_node?
  gene_set_library_node gene_set_library_node?
  gene_set_node         gene_set_node?
  kg_relation_node      kg_relation_node?
  dccs                  dccs?                    @relation(fields: [dcc_id], references: [id])

  @@unique([type, entity_type, slug])
  @@index([dcc_id], map: "node_dcc_idx")
  @@index([entity_type])
  @@index([pagerank(sort: Desc)], map: "node_pagerank")
  @@index([searchable], map: "node_searchable_fts", type: Gin)
  @@index([type])
}

model outreach {
  id                   String           @id
  title                String
  description          String
  featured             Boolean          @default(false)
  link                 String?
  short_description    String
  end_date             DateTime?        @db.Timestamptz(3)
  start_date           DateTime?        @db.Timestamptz(3)
  image                String?
  active               Boolean          @default(false)
  tags                 Json
  application_end      DateTime?        @db.Timestamptz(3)
  application_start    DateTime?        @db.Timestamptz(3)
  carousel             Boolean          @default(false)
  cfde_specific        Boolean          @default(false)
  agenda               Json?
  flyer                String?
  carousel_description String?
  schedule             String?
  recurring            Boolean          @default(false)
  ical                 String?
  center_outreach      center_outreach?
  dcc_outreach         dcc_outreach[]
}

model partnership_publications {
  partnership_id String
  publication_id String
  partnerships   partnerships @relation(fields: [partnership_id], references: [id])
  publications   publications @relation(fields: [publication_id], references: [id])

  @@id([partnership_id, publication_id])
}

model partnerships {
  id                       String                     @id
  title                    String
  description              String?
  image                    String?
  status                   String?
  website                  String?
  priority                 Int?
  grant_num                String?
  dcc_partnerships         dcc_partnerships[]
  partnership_publications partnership_publications[]
}

model publications {
  id                       String                     @id
  authors                  String
  doi                      String?
  issue                    String?
  journal                  String?
  page                     String?
  pmcid                    String?
  pmid                     String?
  title                    String
  volume                   String?
  year                     String?
  tool_id                  String?
  landmark                 Boolean                    @default(false)
  carousel                 Boolean                    @default(false)
  carousel_description     String?
  carousel_link            String?
  carousel_title           String?
  featured                 Boolean                    @default(false)
  image                    String?
  keywords                 Json?
  center_publications      center_publications[]
  dcc_publications         dcc_publications[]
  partnership_publications partnership_publications[]
  tools                    tools?                     @relation(fields: [tool_id], references: [id])
  r03_publications         r03_publications[]
}

model r03 {
  id               String             @id
  title            String
  description      String
  rfa              String?
  end_date         DateTime?
  grant_num        String?
  website          String?
  video            String?
  affilliation     String?
  pi               String?
  r03_publications r03_publications[]
}

model r03_publications {
  publication_id String
  r03_id         String
  publications   publications @relation(fields: [publication_id], references: [id])
  r03            r03          @relation(fields: [r03_id], references: [id])

  @@id([publication_id, r03_id])
}

model tools {
  id                   String         @id
  label                String
  description          String?
  url                  String
  icon                 String?
  image                String?
  short_description    String?
  featured             Boolean?       @default(false)
  tutorial             Json?
  carousel             Boolean        @default(false)
  carousel_description String?
  publications         publications[]
}

model usecase {
  id                String        @id
  title             String
  short_description String
  description       String
  inputs            Json?
  outputs           Json?
  sources           Json?
  link              String?
  image             String?
  tutorial          String?
  creator_dcc_id    String?
  featured          Boolean?      @default(false)
  tool_icon         String?
  featured_image    String?
  tool_name         String?
  dcc_usecase       dcc_usecase[]
  dccs              dccs?         @relation(fields: [creator_dcc_id], references: [id])
}

enum NodeType {
  entity
  gene_set
  gene_set_library
  c2m2_file
  kg_relation
  dcc_asset
}

enum Role {
  USER
  DCC_APPROVER
  UPLOADER
  DRC_APPROVER
  ADMIN
  READONLY
}
