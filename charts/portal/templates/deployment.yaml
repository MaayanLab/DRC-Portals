apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: app
  name: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - env:
        - name: DATABASE_URL
{{- if .Values.database.uri }}
          value: {{ .Values.database.uri }}
{{- else }}
          value: postgresql://{{ .Values.database.username }}:{{ .Values.database.password }}@postgres.{{ .Release.Namespace }}.svc.cluster.local:5432/{{ .Values.database.database }}?schema=public
{{- end }}
        - name: NEXTAUTH_SECRET
          value: {{ .Values.auth.secret }}
        - name: NEXTAUTH_URL
          value: {{ .Values.auth.url }}
        image: maayanlab/drc-portal:{{ .Chart.AppVersion }}
        imagePullPolicy: IfNotPresent
        name: app
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: app
  name: app
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: app
  type: ClusterIP
---
{{- if .Values.info.ingress.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: info-proxy
  name: info-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: info-proxy
  template:
    metadata:
      labels:
        app: info-proxy
      name: info-proxy
    spec:
      containers:
      - env:
        - name: nginx_http_port
          value: "3000"
        - name: nginx_proxy_00
          value: "/ http://app.{{ .Release.Namespace }}.svc.cluster.local:3000/info"
        - name: server_name
          value: {{ .Values.info.ingress.host }}
        - name: nginx_proxy_01
          value: "/(.+) http://app.{{ .Release.Namespace }}.svc.cluster.local:3000/$1"
        image: maayanlab/proxy:1.2.9
        imagePullPolicy: IfNotPresent
        name: info-proxy
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: info-proxy
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: info-proxy
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations: {{ .Values.info.ingress.annotations | toJson }}
  labels:
    app: info-proxy
  name: info-proxy
spec:
  ingressClassName: {{ .Values.info.ingress.className }}
  rules:
  - host: {{ .Values.info.ingress.host }}
    http:
      paths:
      - backend:
          service:
            name: info-proxy
            port:
              number: 3000
        path: /
        pathType: Prefix
{{- if .Values.info.ingress.tlsSecret }}
  tls:
  - hosts:
    - {{ .Values.info.ingress.host }}
    secretName: {{ .Values.info.ingress.tlsSecret }}
{{- end }}
{{- end }}
---
{{- if .Values.data.ingress.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: data-proxy
  name: data-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-proxy
  template:
    metadata:
      labels:
        app: data-proxy
      name: data-proxy
    spec:
      containers:
      - env:
        - name: nginx_http_port
          value: "3000"
        - name: nginx_proxy_00
          value: "/ http://app.{{ .Release.Namespace }}.svc.cluster.local:3000/data"
        - name: server_name
          value: {{ .Values.data.ingress.host }}
        - name: nginx_proxy_01
          value: "/(.+) http://app.{{ .Release.Namespace }}.svc.cluster.local:3000/$1"
        image: maayanlab/proxy:1.2.9
        imagePullPolicy: IfNotPresent
        name: data-proxy
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: data-proxy
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: data-proxy
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations: {{ .Values.data.ingress.annotations | toJson }}
  labels:
    app: app
  name: data-proxy
spec:
  ingressClassName: {{ .Values.data.ingress.className }}
  rules:
  - host: {{ .Values.data.ingress.host }}
    http:
      paths:
      - backend:
          service:
            name: data-proxy
            port:
              number: 3000
        path: /
        pathType: Prefix
{{- if .Values.data.ingress.tlsSecret }}
  tls:
  - hosts:
    - {{ .Values.data.ingress.host }}
    secretName: {{ .Values.data.ingress.tlsSecret }}
{{- end }}
{{- end }}
---
{{- if .Values.database.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: {{ .Values.database.database }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.database.password }}
        - name: POSTGRES_USER
          value: {{ .Values.database.username }}
        image: {{ .Values.database.image | default "postgres" }}
        imagePullPolicy: IfNotPresent
        name: postgres
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-claim0
          subPath: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: postgres-claim0
        persistentVolumeClaim:
          claimName: postgres-claim0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  ports:
  - name: psql
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP
{{- if .Values.database.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres
  name: postgres-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.database.persistence.size }}
  storageClassName: {{ .Values.database.persistence.storageClass }}
  volumeMode: Filesystem
{{- end }}
{{- end }}
